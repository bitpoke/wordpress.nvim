{
    "$schema": "https://raw.githubusercontent.com/wp-hooks/generator/0.9.0/schema.json",
    "hooks": [
        {
            "name": "_admin_menu",
            "file": "wp-admin/includes/menu.php",
            "type": "action",
            "doc": {
                "description": "Fires before the administration menu loads in the admin.",
                "long_description": "The hook fires before menus and sub-menus are removed based on user privileges.",
                "tags": [
                    {
                        "name": "private",
                        "content": ""
                    },
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ],
                "long_description_html": "<p>The hook fires before menus and sub-menus are removed based on user privileges.</p>"
            },
            "args": 0
        },
        {
            "name": "_core_updated_successfully",
            "file": "wp-admin/includes/update-core.php",
            "type": "action",
            "doc": {
                "description": "Fires after WordPress core has been successfully updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WordPress version.",
                        "types": [
                            "string"
                        ],
                        "variable": "$wp_version"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "_network_admin_menu",
            "file": "wp-admin/includes/menu.php",
            "type": "action",
            "doc": {
                "description": "Fires before the administration menu loads in the Network Admin.",
                "long_description": "The hook fires before menus and sub-menus are removed based on user privileges.",
                "tags": [
                    {
                        "name": "private",
                        "content": ""
                    },
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": "<p>The hook fires before menus and sub-menus are removed based on user privileges.</p>"
            },
            "args": 0
        },
        {
            "name": "_user_admin_menu",
            "file": "wp-admin/includes/menu.php",
            "type": "action",
            "doc": {
                "description": "Fires before the administration menu loads in the User Admin.",
                "long_description": "The hook fires before menus and sub-menus are removed based on user privileges.",
                "tags": [
                    {
                        "name": "private",
                        "content": ""
                    },
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": "<p>The hook fires before menus and sub-menus are removed based on user privileges.</p>"
            },
            "args": 0
        },
        {
            "name": "_wp_put_post_revision",
            "file": "wp-includes/revision.php",
            "type": "action",
            "doc": {
                "description": "Fires once a revision has been saved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "6.4.0",
                        "description": "The post_id parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Post revision ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$revision_id"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "activate_blog",
            "file": "wp-admin/network/sites.php",
            "type": "action",
            "doc": {
                "description": "Fires after a network site is activated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the activated site.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "activate_header",
            "file": "wp-activate.php",
            "type": "action",
            "doc": {
                "description": "Fires before the Site Activation page is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "activate_plugin",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires before a plugin is activated.",
                "long_description": "If a plugin is silently activated (such as during an update), this hook does not fire.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the plugin for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$network_wide"
                    }
                ],
                "long_description_html": "<p>If a plugin is silently activated (such as during an update), this hook does not fire.</p>"
            },
            "args": 2
        },
        {
            "name": "activate_wp_head",
            "file": "wp-activate.php",
            "type": "action",
            "doc": {
                "description": "Fires within the `<head>` section of the Site Activation page.",
                "long_description": "Fires on the {@see 'wp_head'} action.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": "<p>Fires on the {@see 'wp_head'} action.</p>"
            },
            "args": 0
        },
        {
            "name": "activate_{$plugin}",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires as a specific plugin is being activated.",
                "long_description": "This hook is the \"activation\" hook used internally by register_activation_hook(). The dynamic portion of the hook name, `$plugin`, refers to the plugin basename.\n If a plugin is silently activated (such as during an update), this hook does not fire.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the plugin for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$network_wide"
                    }
                ],
                "long_description_html": "<p>This hook is the \"activation\" hook used internally by register_activation_hook(). The dynamic portion of the hook name, <code>$plugin</code>, refers to the plugin basename.</p> <p>If a plugin is silently activated (such as during an update), this hook does not fire.</p>"
            },
            "args": 1
        },
        {
            "name": "activated_plugin",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires after a plugin has been activated.",
                "long_description": "If a plugin is silently activated (such as during an update), this hook does not fire.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether to enable the plugin for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$network_wide"
                    }
                ],
                "long_description_html": "<p>If a plugin is silently activated (such as during an update), this hook does not fire.</p>"
            },
            "args": 2
        },
        {
            "name": "activity_box_end",
            "file": "wp-admin/includes/dashboard.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the 'At a Glance' dashboard widget.",
                "long_description": "Prior to 3.8.0, the widget was named 'Right Now'.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": "<p>Prior to 3.8.0, the widget was named 'Right Now'.</p>"
            },
            "args": 0
        },
        {
            "name": "add_admin_bar_menus",
            "file": "wp-includes/class-wp-admin-bar.php",
            "type": "action",
            "doc": {
                "description": "Fires after menus are added to the menu bar.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "add_attachment",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once an attachment has been added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "add_inline_data",
            "file": "wp-admin/includes/template.php",
            "type": "action",
            "doc": {
                "description": "Fires after outputting the fields for the inline editor for posts and pages.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.8"
                    },
                    {
                        "name": "param",
                        "content": "The current post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "The current post's post type object.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "$post_type_object"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "add_link",
            "file": "wp-admin/includes/bookmark.php",
            "type": "action",
            "doc": {
                "description": "Fires after a link was added to the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the link that was added.",
                        "types": [
                            "int"
                        ],
                        "variable": "$link_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "add_meta_boxes",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires after all built-in meta boxes have been added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "$post_type"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "add_meta_boxes_comment",
            "file": "wp-admin/edit-form-comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when comment-specific meta boxes are added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "add_meta_boxes_link",
            "file": "wp-admin/edit-link-form.php",
            "type": "action",
            "doc": {
                "description": "Fires when link-specific meta boxes are added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Link object.",
                        "types": [
                            "object"
                        ],
                        "variable": "$link"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "add_meta_boxes_{$post_type}",
            "aliases": [
                "add_meta_boxes_attachment",
                "add_meta_boxes_page",
                "add_meta_boxes_post"
            ],
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires after all built-in meta boxes have been added, contextually for the given post type.",
                "long_description": "The dynamic portion of the hook name, `$post_type`, refers to the post type of the post.\n Possible hook names include:\n\n  - `add_meta_boxes_post`\n  - `add_meta_boxes_page`\n  - `add_meta_boxes_attachment`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$post_type</code>, refers to the post type of the post.</p> <p>Possible hook names include:</p> <ul> <li><code>add_meta_boxes_post</code></li> <li><code>add_meta_boxes_page</code></li> <li><code>add_meta_boxes_attachment</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "add_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires before an option is added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option to add.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "add_option_{$option}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after a specific option has been added.",
                "long_description": "The dynamic portion of the hook name, `$option`, refers to the option name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0",
                        "description": "As \"add<em>option</em>{$name}\""
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option to add.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>"
            },
            "args": 2
        },
        {
            "name": "add_site_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after a network option has been successfully added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "$network_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "add_site_option_{$option}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after a specific network option has been successfully added.",
                "long_description": "The dynamic portion of the hook name, `$option`, refers to the option name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As \"add_site<em>option</em>{$key}\""
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "$network_id"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>"
            },
            "args": 3
        },
        {
            "name": "add_tag_form_fields",
            "file": "wp-admin/edit-tags.php",
            "type": "action",
            "doc": {
                "description": "Fires after the Add Tag form fields for non-hierarchical taxonomies.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "add_term_relationship",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before an object-term relationship is added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$taxonomy</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "add_user_role",
            "file": "wp-includes/class-wp-user.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after the user has been given a new role.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "The new role.",
                        "types": [
                            "string"
                        ],
                        "variable": "$role"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "add_user_to_blog",
            "file": "wp-includes/ms-functions.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a user is added to a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "User role.",
                        "types": [
                            "string"
                        ],
                        "variable": "$role"
                    },
                    {
                        "name": "param",
                        "content": "Blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$blog_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "add_{$meta_type}_meta",
            "aliases": [
                "add_comment_meta",
                "add_post_meta",
                "add_term_meta",
                "add_user_meta"
            ],
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before meta of a specific type is added.",
                "long_description": "The dynamic portion of the hook name, `$meta_type`, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).\n Possible hook names include:\n\n  - `add_post_meta`\n  - `add_comment_meta`\n  - `add_term_meta`\n  - `add_user_meta`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$_meta_value"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$meta_type</code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).</p> <p>Possible hook names include:</p> <ul> <li><code>add_post_meta</code></li> <li><code>add_comment_meta</code></li> <li><code>add_term_meta</code></li> <li><code>add_user_meta</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "added_existing_user",
            "file": "wp-includes/ms-functions.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after an existing user is added to a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "True on success or a WP_Error object if the user doesn't exist or could not be added.",
                        "types": [
                            "true",
                            "\\WP_Error"
                        ],
                        "variable": "$result"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "added_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after an option has been added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the added option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "Value of the option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "added_term_relationship",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after an object-term relationship is added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$taxonomy</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "added_{$meta_type}_meta",
            "aliases": [
                "added_comment_meta",
                "added_post_meta",
                "added_term_meta",
                "added_user_meta"
            ],
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after meta of a specific type is added.",
                "long_description": "The dynamic portion of the hook name, `$meta_type`, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).\n Possible hook names include:\n\n  - `added_post_meta`\n  - `added_comment_meta`\n  - `added_term_meta`\n  - `added_user_meta`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The meta ID after successful update.",
                        "types": [
                            "int"
                        ],
                        "variable": "$mid"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$_meta_value"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$meta_type</code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).</p> <p>Possible hook names include:</p> <ul> <li><code>added_post_meta</code></li> <li><code>added_comment_meta</code></li> <li><code>added_term_meta</code></li> <li><code>added_user_meta</code></li> </ul>"
            },
            "args": 4
        },
        {
            "name": "admin_action_{$action}",
            "file": "wp-admin/admin.php",
            "type": "action",
            "doc": {
                "description": "Fires when an 'action' request variable is sent.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the action derived from the `GET` or `POST` request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the action derived from the <code>GET</code> or <code>POST</code> request.</p>"
            },
            "args": 0
        },
        {
            "name": "admin_bar_init",
            "file": "wp-includes/class-wp-admin-bar.php",
            "type": "action",
            "doc": {
                "description": "Fires after WP_Admin_Bar is initialized.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_bar_menu",
            "file": "wp-includes/admin-bar.php",
            "type": "action_reference",
            "doc": {
                "description": "Loads all necessary admin bar items.",
                "long_description": "This is the hook used to add, remove, or manipulate admin bar items.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Admin_Bar instance, passed by reference.",
                        "types": [
                            "\\WP_Admin_Bar"
                        ],
                        "variable": "$wp_admin_bar"
                    }
                ],
                "long_description_html": "<p>This is the hook used to add, remove, or manipulate admin bar items.</p>"
            },
            "args": 1
        },
        {
            "name": "admin_color_scheme_picker",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires in the 'Admin Color Scheme' section of the user editing screen.",
                "long_description": "The section is only enabled if a callback is hooked to the action, and if there is more than one defined color scheme for the admin.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.8.1",
                        "description": "Added <code>$user_id</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": "<p>The section is only enabled if a callback is hooked to the action, and if there is more than one defined color scheme for the admin.</p>"
            },
            "args": 1
        },
        {
            "name": "admin_email_confirm",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires before the admin email confirm form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "A <code>WP_Error</code> object containing any errors generated by using invalid credentials. Note that the error object may not contain any errors.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "admin_email_confirm_form",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the admin-email-confirm-form form tags, before the hidden fields.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_enqueue_scripts",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Fires when enqueuing scripts for all admin pages.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The current admin page.",
                        "types": [
                            "string"
                        ],
                        "variable": "$hook_suffix"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "admin_footer",
            "file": "wp-admin/admin-footer.php",
            "type": "action",
            "doc": {
                "description": "Prints scripts or data before the default footer scripts.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The data to print.",
                        "types": [
                            "string"
                        ],
                        "variable": "$data"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "admin_footer-{$hook_suffix}",
            "file": "wp-admin/admin-footer.php",
            "type": "action",
            "doc": {
                "description": "Prints scripts or data after the default footer scripts.",
                "long_description": "The dynamic portion of the hook name, `$hook_suffix`, refers to the global hook suffix of the current page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$hook_suffix</code>, refers to the global hook suffix of the current page.</p>"
            },
            "args": 0
        },
        {
            "name": "admin_head",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Fires in head section for all admin pages.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_head-media-upload-popup",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires when scripts enqueued for the admin header for the legacy (pre-3.5.0) media upload popup are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_head-{$hook_suffix}",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Fires in head section for a specific admin page.",
                "long_description": "The dynamic portion of the hook name, `$hook_suffix`, refers to the hook suffix for the admin page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$hook_suffix</code>, refers to the hook suffix for the admin page.</p>"
            },
            "args": 0
        },
        {
            "name": "admin_head_{$content_func}",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires in the admin header for each specific form tab in the legacy (pre-3.5.0) media upload popup.",
                "long_description": "The dynamic portion of the hook name, `$content_func`, refers to the form callback for the media upload type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$content_func</code>, refers to the form callback for the media upload type.</p>"
            },
            "args": 0
        },
        {
            "name": "admin_init",
            "file": "wp-admin/admin.php",
            "type": "action",
            "doc": {
                "description": "Fires as an admin screen or script is being initialized.",
                "long_description": "Note, this does not just run on user-facing admin screens. It runs on admin-ajax.php and admin-post.php as well.\n This is roughly analogous to the more general {@see 'init'} hook, which fires earlier.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": "<p>Note, this does not just run on user-facing admin screens. It runs on admin-ajax.php and admin-post.php as well.</p> <p>This is roughly analogous to the more general {@see 'init'} hook, which fires earlier.</p>"
            },
            "args": 0
        },
        {
            "name": "admin_menu",
            "file": "wp-admin/includes/menu.php",
            "type": "action",
            "doc": {
                "description": "Fires before the administration menu loads in the admin.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty context.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "admin_notices",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Prints admin screen notices.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_page_access_denied",
            "file": "wp-admin/includes/menu.php",
            "type": "action",
            "doc": {
                "description": "Fires when access to an admin page is denied.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_post",
            "file": "wp-admin/admin-post.php",
            "type": "action",
            "doc": {
                "description": "Fires on an authenticated admin post request where no action is supplied.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_post_nopriv",
            "file": "wp-admin/admin-post.php",
            "type": "action",
            "doc": {
                "description": "Fires on a non-authenticated admin post request where no action is supplied.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_post_nopriv_{$action}",
            "file": "wp-admin/admin-post.php",
            "type": "action",
            "doc": {
                "description": "Fires on a non-authenticated admin post request for the given action.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the given request action.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the given request action.</p>"
            },
            "args": 0
        },
        {
            "name": "admin_post_{$action}",
            "file": "wp-admin/admin-post.php",
            "type": "action",
            "doc": {
                "description": "Fires on an authenticated admin post request for the given action.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the given request action.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the given request action.</p>"
            },
            "args": 0
        },
        {
            "name": "admin_print_footer_scripts",
            "file": "wp-admin/admin-footer.php",
            "type": "action",
            "doc": {
                "description": "Prints any scripts and data queued for the footer.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_print_footer_scripts-{$hook_suffix}",
            "file": "wp-admin/admin-footer.php",
            "type": "action",
            "doc": {
                "description": "Prints scripts and data queued for the footer.",
                "long_description": "The dynamic portion of the hook name, `$hook_suffix`, refers to the global hook suffix of the current page.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$hook_suffix</code>, refers to the global hook suffix of the current page.</p>"
            },
            "args": 0
        },
        {
            "name": "admin_print_scripts",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Fires when scripts are printed for all admin pages.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_print_scripts-media-upload-popup",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires when admin scripts enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_print_scripts-{$hook_suffix}",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Fires when scripts are printed for a specific admin page based on $hook_suffix.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_print_styles",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Fires when styles are printed for all admin pages.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_print_styles-media-upload-popup",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires when admin styles enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_print_styles-{$hook_suffix}",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Fires when styles are printed for a specific admin page based on $hook_suffix.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "admin_xml_ns",
            "file": "wp-admin/includes/template.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the HTML tag in the admin header.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "adminmenu",
            "file": "wp-admin/menu-header.php",
            "type": "action",
            "doc": {
                "description": "Fires after the admin menu has been output.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "after-{$taxonomy}-table",
            "aliases": [
                "after-category-table",
                "after-post_tag-table"
            ],
            "file": "wp-admin/edit-tags.php",
            "type": "action",
            "doc": {
                "description": "Fires after the taxonomy list table.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `after-category-table`\n  - `after-post_tag-table`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>after-category-table</code></li> <li><code>after-post_tag-table</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "after_core_auto_updates_settings",
            "file": "wp-admin/update-core.php",
            "type": "action",
            "doc": {
                "description": "Fires after the major core auto-update settings.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "{ Array of core auto-update settings. @type bool $dev   Whether to enable automatic updates for development versions. @type bool $minor Whether to enable minor automatic core updates. @type bool $major Whether to enable major automatic core updates.\n}",
                        "types": [
                            "array"
                        ],
                        "variable": "$auto_update_settings"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "after_db_upgrade",
            "file": "wp-admin/admin.php",
            "type": "action",
            "doc": {
                "description": "Fires on the next page load after a successful DB upgrade.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "after_delete_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post is deleted, at the conclusion of wp_delete_post().",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post</code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "refers": "wp_delete_post()"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$postid"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "after_menu_locations_table",
            "file": "wp-admin/nav-menus.php",
            "type": "action",
            "doc": {
                "description": "Fires after the menu locations table is displayed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "after_mu_upgrade",
            "file": "wp-admin/network/upgrade.php",
            "type": "action",
            "doc": {
                "description": "Fires after the Multisite DB upgrade for each site is complete.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The upgrade response array.",
                        "types": [
                            "array"
                        ],
                        "variable": "$response"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "after_password_reset",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user's password is reset.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "New user password.",
                        "types": [
                            "string"
                        ],
                        "variable": "$new_pass"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "after_plugin_row",
            "file": "wp-admin/includes/class-wp-plugins-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires after each row in the Plugins list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added 'auto-update-enabled' and 'auto-update-disabled'              to possible values for <code>$status</code>."
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "$plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "Status filter currently applied to the plugin list. Possible values are: 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', 'search', 'paused', 'auto-update-enabled', 'auto-update-disabled'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$status"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "after_plugin_row_meta",
            "file": "wp-admin/includes/class-wp-plugins-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires after plugin row meta.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Refer to {@see 'plugin_row_meta'} filter.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "Refer to {@see 'plugin_row_meta'} filter.",
                        "types": [
                            "array"
                        ],
                        "variable": "$plugin_data"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "after_plugin_row_{$plugin_file}",
            "file": "wp-admin/includes/class-wp-plugins-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires after each specific row in the Plugins list table.",
                "long_description": "The dynamic portion of the hook name, `$plugin_file`, refers to the path to the plugin file, relative to the plugins directory.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added 'auto-update-enabled' and 'auto-update-disabled'              to possible values for <code>$status</code>."
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "$plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "Status filter currently applied to the plugin list. Possible values are: 'all', 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', 'search', 'paused', 'auto-update-enabled', 'auto-update-disabled'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$status"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$plugin_file</code>, refers to the path to the plugin file, relative to the plugins directory.</p>"
            },
            "args": 3
        },
        {
            "name": "after_setup_theme",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires after the theme is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "after_signup_form",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires after the sign-up forms, before wp_footer.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "after_signup_site",
            "file": "wp-includes/ms-functions.php",
            "type": "action",
            "doc": {
                "description": "Fires after site signup information has been written to the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The requested domain.",
                        "types": [
                            "string"
                        ],
                        "variable": "$domain"
                    },
                    {
                        "name": "param",
                        "content": "The requested path.",
                        "types": [
                            "string"
                        ],
                        "variable": "$path"
                    },
                    {
                        "name": "param",
                        "content": "The requested site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "$title"
                    },
                    {
                        "name": "param",
                        "content": "The user's requested login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "The user's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_email"
                    },
                    {
                        "name": "param",
                        "content": "The user's activation key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "$meta"
                    }
                ],
                "long_description_html": ""
            },
            "args": 7
        },
        {
            "name": "after_signup_user",
            "file": "wp-includes/ms-functions.php",
            "type": "action",
            "doc": {
                "description": "Fires after a user's signup information has been written to the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The user's requested login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "The user's email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_email"
                    },
                    {
                        "name": "param",
                        "content": "The user's activation key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$key"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. Default empty array.",
                        "types": [
                            "array"
                        ],
                        "variable": "$meta"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "after_switch_theme",
            "file": "wp-includes/theme.php",
            "type": "action",
            "doc": {
                "description": "Fires on the next WP load after the theme has been switched.",
                "long_description": "The parameters differ according to whether the old theme exists or not. If the old theme is missing, the old name will instead be the slug of the old theme.\n See {@see 'switch_theme'}.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Old theme name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$old_name"
                    },
                    {
                        "name": "param",
                        "content": "WP_Theme instance of the old theme.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "$old_theme"
                    }
                ],
                "long_description_html": "<p>The parameters differ according to whether the old theme exists or not. If the old theme is missing, the old name will instead be the slug of the old theme.</p> <p>See {@see 'switch_theme'}.</p>"
            },
            "args": 2
        },
        {
            "name": "after_theme_row",
            "file": "wp-admin/includes/class-wp-ms-themes-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires after each row in the Multisite themes list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "$theme"
                    },
                    {
                        "name": "param",
                        "content": "Status of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$status"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "after_theme_row_{$stylesheet}",
            "file": "wp-admin/includes/class-wp-ms-themes-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires after each specific row in the Multisite themes list table.",
                "long_description": "The dynamic portion of the hook name, `$stylesheet`, refers to the directory name of the theme, most often synonymous with the template name of the theme.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "$theme"
                    },
                    {
                        "name": "param",
                        "content": "Status of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$status"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$stylesheet</code>, refers to the directory name of the theme, most often synonymous with the template name of the theme.</p>"
            },
            "args": 3
        },
        {
            "name": "after_wp_tiny_mce",
            "file": "wp-includes/class-wp-editor.php",
            "type": "action",
            "doc": {
                "description": "Fires after any core TinyMCE editor instances are created.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "TinyMCE settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "$mce_settings"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "all_admin_notices",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Prints generic admin screen notices.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "application_password_did_authenticate",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires after an application password was used for authentication.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user who was authenticated.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "The application password used.",
                        "types": [
                            "array"
                        ],
                        "variable": "$item"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "application_password_failed_authentication",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires when an application password failed to authenticate the user.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The authentication error.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$error"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "archive_blog",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when the 'archived' status is added to a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "atom_author",
            "file": "wp-includes/feed-atom.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of each Atom feed author entry.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "atom_comments_ns",
            "file": "wp-includes/feed-atom-comments.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the feed tag in the Atom comment feed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "atom_entry",
            "file": "wp-includes/feed-atom.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of each Atom feed item.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "atom_head",
            "file": "wp-includes/feed-atom.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the first Atom feed entry.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "atom_ns",
            "file": "wp-includes/feed-atom.php",
            "type": "action",
            "doc": {
                "description": "Fires at end of the Atom feed root to add namespaces.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "attachment_submitbox_misc_actions",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires after the 'Uploaded on' section of the Save meta box in the attachment editing screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$post</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current attachment.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "attachment_updated",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once an existing attachment has been updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object following the update.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post_after"
                    },
                    {
                        "name": "param",
                        "content": "Post object before the update.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post_before"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "auth_cookie_bad_hash",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires if a bad authentication cookie hash is encountered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{ Authentication cookie components. None of the components should be assumed to be valid as they come directly from a client-provided cookie value. @type string $username   User's username. @type string $expiration The time the cookie expires as a UNIX timestamp. @type string $token      User's session token used. @type string $hmac       The security hash for the cookie. @type string $scheme     The cookie scheme to use.\n}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$cookie_elements"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "auth_cookie_bad_session_token",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires if a bad session token is encountered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{ Authentication cookie components. None of the components should be assumed to be valid as they come directly from a client-provided cookie value. @type string $username   User's username. @type string $expiration The time the cookie expires as a UNIX timestamp. @type string $token      User's session token used. @type string $hmac       The security hash for the cookie. @type string $scheme     The cookie scheme to use.\n}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$cookie_elements"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "auth_cookie_bad_username",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires if a bad username is entered in the user authentication process.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{ Authentication cookie components. None of the components should be assumed to be valid as they come directly from a client-provided cookie value. @type string $username   User's username. @type string $expiration The time the cookie expires as a UNIX timestamp. @type string $token      User's session token used. @type string $hmac       The security hash for the cookie. @type string $scheme     The cookie scheme to use.\n}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$cookie_elements"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "auth_cookie_expired",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires once an authentication cookie has expired.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{ Authentication cookie components. None of the components should be assumed to be valid as they come directly from a client-provided cookie value. @type string $username   User's username. @type string $expiration The time the cookie expires as a UNIX timestamp. @type string $token      User's session token used. @type string $hmac       The security hash for the cookie. @type string $scheme     The cookie scheme to use.\n}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$cookie_elements"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "auth_cookie_malformed",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires if an authentication cookie is malformed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Malformed auth cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "$cookie"
                    },
                    {
                        "name": "param",
                        "content": "Authentication scheme. Values include 'auth', 'secure_auth', or 'logged_in'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$scheme"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "auth_cookie_valid",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires once an authentication cookie has been validated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "{ Authentication cookie components. @type string $username   User's username. @type string $expiration The time the cookie expires as a UNIX timestamp. @type string $token      User's session token used. @type string $hmac       The security hash for the cookie. @type string $scheme     The cookie scheme to use.\n}",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$cookie_elements"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "auth_redirect",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires before the authentication redirect.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "automatic_updates_complete",
            "file": "wp-admin/includes/class-wp-automatic-updater.php",
            "type": "action",
            "doc": {
                "description": "Fires after all automatic updates have run.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The results of all attempted updates.",
                        "types": [
                            "array"
                        ],
                        "variable": "$update_results"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "before_delete_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires before a post is deleted, at the start of wp_delete_post().",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post</code> parameter."
                    },
                    {
                        "name": "see",
                        "content": "",
                        "refers": "wp_delete_post()"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$postid"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "before_signup_form",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires before the site Sign-up form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "before_signup_header",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires before the Site Sign-up page is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "before_wp_tiny_mce",
            "file": "wp-includes/class-wp-editor.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before the TinyMCE settings are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    },
                    {
                        "name": "param",
                        "content": "TinyMCE settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "$mce_settings"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "begin_fetch_post_thumbnail_html",
            "file": "wp-includes/post-thumbnail-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before fetching the post thumbnail HTML.",
                "long_description": "Provides \"just in time\" filtering of all filters in wp_get_attachment_image().",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "The post thumbnail ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_thumbnail_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "$size"
                    }
                ],
                "long_description_html": "<p>Provides \"just in time\" filtering of all filters in wp_get_attachment_image().</p>"
            },
            "args": 3
        },
        {
            "name": "block_editor_meta_box_hidden_fields",
            "file": "wp-admin/includes/post.php",
            "type": "action",
            "doc": {
                "description": "Adds hidden input fields to the meta box save form.",
                "long_description": "Hook into this action to print `<input type=\"hidden\" ... />` fields, which will be POSTed back to the server when meta boxes are saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The post that is being edited.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": "<p>Hook into this action to print <code>&lt;input type=\"hidden\" ... /&gt;</code> fields, which will be POSTed back to the server when meta boxes are saved.</p>"
            },
            "args": 1
        },
        {
            "name": "blog_privacy_selector",
            "file": "wp-admin/options-reading.php",
            "type": "action",
            "doc": {
                "description": "Enables the legacy 'Site visibility' privacy options.",
                "long_description": "By default the privacy options form displays a single checkbox to 'discourage' search engines from indexing the site. Hooking to this action serves a dual purpose:\n\n 1. Disable the single checkbox in favor of a multiple-choice list of radio buttons.\n 2. Open the door to adding additional radio button choices to the list.\n Hooking to this action also converts the 'Search engine visibility' heading to the more open-ended 'Site visibility' heading.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": "<p>By default the privacy options form displays a single checkbox to 'discourage' search engines from indexing the site. Hooking to this action serves a dual purpose:</p> <ol> <li>Disable the single checkbox in favor of a multiple-choice list of radio buttons.</li> <li>Open the door to adding additional radio button choices to the list.</li> </ol> <p>Hooking to this action also converts the 'Search engine visibility' heading to the more open-ended 'Site visibility' heading.</p>"
            },
            "args": 0
        },
        {
            "name": "bulk_edit_custom_box",
            "file": "wp-admin/includes/class-wp-posts-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires once for each column in Bulk Edit mode.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column to edit.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "The post type slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$post_type"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "bulk_edit_posts",
            "file": "wp-admin/includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after processing the post data for bulk edit.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of updated post IDs.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "$updated"
                    },
                    {
                        "name": "param",
                        "content": "Associative array containing the post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$shared_post_data"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "change_locale",
            "file": "wp-includes/class-wp-locale-switcher.php",
            "type": "action",
            "doc": {
                "description": "Fires when the locale is switched to or restored.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The new locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "$locale"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "check_admin_referer",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires once the admin request has been validated or not.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The nonce action.",
                        "types": [
                            "string"
                        ],
                        "variable": "$action"
                    },
                    {
                        "name": "param",
                        "content": "False if the nonce is invalid, 1 if the nonce is valid and generated between 0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.",
                        "types": [
                            "false",
                            "int"
                        ],
                        "variable": "$result"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "check_ajax_referer",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires once the Ajax request has been validated or not.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The Ajax nonce action.",
                        "types": [
                            "string"
                        ],
                        "variable": "$action"
                    },
                    {
                        "name": "param",
                        "content": "False if the nonce is invalid, 1 if the nonce is valid and generated between 0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.",
                        "types": [
                            "false",
                            "int"
                        ],
                        "variable": "$result"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "check_comment_flood",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a comment is marked approved.",
                "long_description": "Allows checking for comment flooding.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$avoid_die</code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$avoid_die</code> parameter was renamed to <code>$wp_error</code>."
                    },
                    {
                        "name": "param",
                        "content": "Comment author's IP address.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_author_ip"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's email.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_author_email"
                    },
                    {
                        "name": "param",
                        "content": "GMT date the comment was posted.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_date_gmt"
                    },
                    {
                        "name": "param",
                        "content": "Whether to return a WP_Error object instead of executing wp_die() or die() if a comment flood is occurring.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$wp_error"
                    }
                ],
                "long_description_html": "<p>Allows checking for comment flooding.</p>"
            },
            "args": 4
        },
        {
            "name": "check_passwords",
            "file": "wp-admin/includes/user.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before the password and confirm password fields are checked for congruity.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The username.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_login"
                    },
                    {
                        "name": "param",
                        "content": "The password (passed by reference).",
                        "types": [
                            "string"
                        ],
                        "variable": "$pass1"
                    },
                    {
                        "name": "param",
                        "content": "The confirmed password (passed by reference).",
                        "types": [
                            "string"
                        ],
                        "variable": "$pass2"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "clean_attachment_cache",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after the given attachment's cache is cleaned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "clean_comment_cache",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment has been removed from the object cache.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "clean_network_cache",
            "file": "wp-includes/ms-network.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a network has been removed from the object cache.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Network ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "clean_object_term_cache",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after the object term cache has been cleaned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of object IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$object_ids"
                    },
                    {
                        "name": "param",
                        "content": "Object type.",
                        "types": [
                            "string"
                        ],
                        "variable": "$object_type"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "clean_page_cache",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after the given page's cache is cleaned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "clean_post_cache",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after the given post's cache is cleaned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "clean_site_cache",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a site has been removed from the object cache.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$id"
                    },
                    {
                        "name": "param",
                        "content": "Site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "$blog"
                    },
                    {
                        "name": "param",
                        "content": "md5 hash of domain and path.",
                        "types": [
                            "string"
                        ],
                        "variable": "$domain_path_key"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "clean_taxonomy_cache",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a taxonomy's caches have been cleaned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "clean_term_cache",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires once after each taxonomy's term cache has been cleaned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Added the <code>$clean_taxonomy</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "An array of term IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$ids"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Whether or not to clean taxonomy-wide caches",
                        "types": [
                            "bool"
                        ],
                        "variable": "$clean_taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "clean_user_cache",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after the given user's cache is cleaned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "clear_auth_cookie",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the authentication cookies are cleared.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "comment_atom_entry",
            "file": "wp-includes/feed-atom-comments.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of each Atom comment feed item.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the current comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the post the current comment is connected to.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "comment_closed",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when a comment is attempted on a post that has comments closed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "comment_duplicate_trigger",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a duplicate comment is detected.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$commentdata"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "comment_flood_trigger",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires before the comment flood message is triggered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Timestamp of when the last comment was posted.",
                        "types": [
                            "int"
                        ],
                        "variable": "$time_lastcomment"
                    },
                    {
                        "name": "param",
                        "content": "Timestamp of when the new comment was posted.",
                        "types": [
                            "int"
                        ],
                        "variable": "$time_newcomment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "comment_form",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires at the bottom of the comment form, inside the closing form tag.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "comment_form_after",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires after the comment form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "comment_form_after_fields",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires after the comment fields in the comment form, excluding the textarea.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "comment_form_before",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before the comment form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "comment_form_before_fields",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before the comment fields in the comment form, excluding the textarea.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "comment_form_comments_closed",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires after the comment form if comments are closed.",
                "long_description": "For backward compatibility, this action also fires if comment_form() is called with an invalid post object or ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": "<p>For backward compatibility, this action also fires if comment_form() is called with an invalid post object or ID.</p>"
            },
            "args": 0
        },
        {
            "name": "comment_form_logged_in_after",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires after the is_user_logged_in() check in the comment form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array containing the comment author's username, email, and URL.",
                        "types": [
                            "array"
                        ],
                        "variable": "$commenter"
                    },
                    {
                        "name": "param",
                        "content": "If the commenter is a registered user, the display name, blank otherwise.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_identity"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "comment_form_must_log_in_after",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires after the HTML-formatted 'must log in after' message in the comment form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "comment_form_top",
            "file": "wp-includes/comment-template.php",
            "type": "action",
            "doc": {
                "description": "Fires at the top of the comment form, inside the form tag.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "comment_id_not_found",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when a comment is attempted on a post that does not exist.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "comment_loop_start",
            "file": "wp-includes/class-wp-query.php",
            "type": "action",
            "doc": {
                "description": "Fires once the comment loop is started.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "comment_on_draft",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when a comment is attempted on a post in draft mode.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "comment_on_password_protected",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when a comment is attempted on a password-protected post.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "comment_on_trash",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when a comment is attempted on a trashed post.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "comment_post",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment is inserted into the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The <code>$commentdata</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "1 if the comment is approved, 0 if not, 'spam' if spam.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "$comment_approved"
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$commentdata"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "comment_reply_to_unapproved_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when a comment reply is attempted to an unapproved comment.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    },
                    {
                        "name": "param",
                        "content": "Parent comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_parent"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "comment_{$new_status}_{$comment->comment_type}",
            "aliases": [
                "comment_approved_comment",
                "comment_approved_pingback",
                "comment_approved_trackback",
                "comment_spam_comment",
                "comment_spam_pingback",
                "comment_spam_trackback",
                "comment_unapproved_comment",
                "comment_unapproved_pingback",
                "comment_unapproved_trackback"
            ],
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when the status of a specific comment type is in transition.",
                "long_description": "The dynamic portions of the hook name, `$new_status`, and `$comment->comment_type`, refer to the new comment status, and the type of comment, respectively.\n Typical comment types include 'comment', 'pingback', or 'trackback'.\n Possible hook names include:\n\n  - `comment_approved_comment`\n  - `comment_approved_pingback`\n  - `comment_approved_trackback`\n  - `comment_unapproved_comment`\n  - `comment_unapproved_pingback`\n  - `comment_unapproved_trackback`\n  - `comment_spam_comment`\n  - `comment_spam_pingback`\n  - `comment_spam_trackback`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": "<p>The dynamic portions of the hook name, <code>$new_status</code>, and <code>$comment-&gt;comment_type</code>, refer to the new comment status, and the type of comment, respectively.</p> <p>Typical comment types include 'comment', 'pingback', or 'trackback'.</p> <p>Possible hook names include:</p> <ul> <li><code>comment_approved_comment</code></li> <li><code>comment_approved_pingback</code></li> <li><code>comment_approved_trackback</code></li> <li><code>comment_unapproved_comment</code></li> <li><code>comment_unapproved_pingback</code></li> <li><code>comment_unapproved_trackback</code></li> <li><code>comment_spam_comment</code></li> <li><code>comment_spam_pingback</code></li> <li><code>comment_spam_trackback</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "comment_{$old_status}_to_{$new_status}",
            "aliases": [
                "comment_approved_to_spam",
                "comment_approved_to_unapproved",
                "comment_spam_to_approved",
                "comment_spam_to_unapproved",
                "comment_unapproved_to_approved",
                "comment_unapproved_to_spam"
            ],
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when the comment status is in transition from one specific status to another.",
                "long_description": "The dynamic portions of the hook name, `$old_status`, and `$new_status`, refer to the old and new comment statuses, respectively.\n Possible hook names include:\n\n  - `comment_unapproved_to_approved`\n  - `comment_spam_to_approved`\n  - `comment_approved_to_unapproved`\n  - `comment_spam_to_unapproved`\n  - `comment_unapproved_to_spam`\n  - `comment_approved_to_spam`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": "<p>The dynamic portions of the hook name, <code>$old_status</code>, and <code>$new_status</code>, refer to the old and new comment statuses, respectively.</p> <p>Possible hook names include:</p> <ul> <li><code>comment_unapproved_to_approved</code></li> <li><code>comment_spam_to_approved</code></li> <li><code>comment_approved_to_unapproved</code></li> <li><code>comment_spam_to_unapproved</code></li> <li><code>comment_unapproved_to_spam</code></li> <li><code>comment_approved_to_spam</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "commentrss2_item",
            "file": "wp-includes/feed-rss2-comments.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of each RSS2 comment feed item.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the comment being displayed.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the post the comment is connected to.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "comments_atom_head",
            "file": "wp-includes/feed-atom-comments.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the Atom comment feed header.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "commentsrss2_head",
            "file": "wp-includes/feed-rss2-comments.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the RSS2 comment feed header.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "core_upgrade_preamble",
            "file": "wp-admin/update-core.php",
            "type": "action",
            "doc": {
                "description": "Fires after the core, plugin, and theme update tables.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "create_term",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a new term is created, before the term cache is cleaned.",
                "long_description": "The {@see 'create_$taxonomy'} hook is also available for targeting a specific taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The {@see 'create_$taxonomy'} hook is also available for targeting a specific taxonomy.</p>"
            },
            "args": 4
        },
        {
            "name": "create_{$taxonomy}",
            "aliases": [
                "create_category",
                "create_post_tag"
            ],
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new term is created for a specific taxonomy.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the slug of the taxonomy the term was created for.\n Possible hook names include:\n\n  - `create_category`\n  - `create_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the slug of the taxonomy the term was created for.</p> <p>Possible hook names include:</p> <ul> <li><code>create_category</code></li> <li><code>create_post_tag</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "created_term",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new term is created, and after the term cache has been cleaned.",
                "long_description": "The {@see 'created_$taxonomy'} hook is also available for targeting a specific taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The {@see 'created_$taxonomy'} hook is also available for targeting a specific taxonomy.</p>"
            },
            "args": 4
        },
        {
            "name": "created_{$taxonomy}",
            "aliases": [
                "created_category",
                "created_post_tag"
            ],
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new term in a specific taxonomy is created, and after the term cache has been cleaned.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `created_category`\n  - `created_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>created_category</code></li> <li><code>created_post_tag</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "cron_reschedule_event_error",
            "file": "wp-cron.php",
            "type": "action",
            "doc": {
                "description": "Fires when an error happens rescheduling a cron event.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$result"
                    },
                    {
                        "name": "param",
                        "content": "Action hook to execute when the event is run.",
                        "types": [
                            "string"
                        ],
                        "variable": "$hook"
                    },
                    {
                        "name": "param",
                        "content": "Event data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$v"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "cron_unschedule_event_error",
            "file": "wp-cron.php",
            "type": "action",
            "doc": {
                "description": "Fires when an error happens unscheduling a cron event.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$result"
                    },
                    {
                        "name": "param",
                        "content": "Action hook to execute when the event is run.",
                        "types": [
                            "string"
                        ],
                        "variable": "$hook"
                    },
                    {
                        "name": "param",
                        "content": "Event data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$v"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "current_screen",
            "file": "wp-admin/includes/class-wp-screen.php",
            "type": "action",
            "doc": {
                "description": "Fires after the current screen has been set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Screen object.",
                        "types": [
                            "\\WP_Screen"
                        ],
                        "variable": "$current_screen"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "custom_header_options",
            "file": "wp-admin/includes/class-custom-image-header.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the submit button in the custom header options form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "customize_controls_enqueue_scripts",
            "file": "wp-admin/customize.php",
            "type": "action",
            "doc": {
                "description": "Fires when enqueuing Customizer control scripts.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "customize_controls_head",
            "file": "wp-admin/customize.php",
            "type": "action",
            "doc": {
                "description": "Fires in head section of Customizer controls.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "customize_controls_init",
            "file": "wp-admin/customize.php",
            "type": "action",
            "doc": {
                "description": "Fires when Customizer controls are initialized, before scripts are enqueued.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "customize_controls_print_footer_scripts",
            "file": "wp-admin/customize.php",
            "type": "action",
            "doc": {
                "description": "Prints templates, control scripts, and settings in the footer.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "customize_controls_print_scripts",
            "file": "wp-admin/customize.php",
            "type": "action",
            "doc": {
                "description": "Fires when Customizer control scripts are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "customize_controls_print_styles",
            "file": "wp-admin/customize.php",
            "type": "action",
            "doc": {
                "description": "Fires when Customizer control styles are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "customize_post_value_set",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Announces when any setting's unsanitized post value has been set.",
                "long_description": "Fires when the WP_Customize_Manager::set_post_value() method is called.\n This is useful for `WP_Customize_Setting` instances to watch in order to update a cached previewed value.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Setting ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "$setting_id"
                    },
                    {
                        "name": "param",
                        "content": "Unsanitized setting post value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": "<p>Fires when the WP_Customize_Manager::set_post_value() method is called.</p> <p>This is useful for <code>WP_Customize_Setting</code> instances to watch in order to update a cached previewed value.</p>"
            },
            "args": 3
        },
        {
            "name": "customize_post_value_set_{$setting_id}",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Announces when a specific setting's unsanitized post value has been set.",
                "long_description": "Fires when the WP_Customize_Manager::set_post_value() method is called.\n The dynamic portion of the hook name, `$setting_id`, refers to the setting ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Unsanitized setting post value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": "<p>Fires when the WP_Customize_Manager::set_post_value() method is called.</p> <p>The dynamic portion of the hook name, <code>$setting_id</code>, refers to the setting ID.</p>"
            },
            "args": 2
        },
        {
            "name": "customize_preview_init",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Fires once the Customizer preview has initialized and JavaScript settings have been printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "customize_preview_{$this->id}",
            "file": "wp-includes/class-wp-customize-setting.php",
            "type": "action",
            "doc": {
                "description": "Fires when the WP_Customize_Setting::preview() method is called for settings not handled as theme_mods or options.",
                "long_description": "The dynamic portion of the hook name, `$this->id`, refers to the setting ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "$setting"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;id</code>, refers to the setting ID.</p>"
            },
            "args": 1
        },
        {
            "name": "customize_preview_{$this->type}",
            "file": "wp-includes/class-wp-customize-setting.php",
            "type": "action",
            "doc": {
                "description": "Fires when the WP_Customize_Setting::preview() method is called for settings not handled as theme_mods or options.",
                "long_description": "The dynamic portion of the hook name, `$this->type`, refers to the setting type.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "$setting"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;type</code>, refers to the setting type.</p>"
            },
            "args": 1
        },
        {
            "name": "customize_register",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Fires once WordPress has loaded, allowing scripts and styles to be initialized.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "customize_render_control",
            "file": "wp-includes/class-wp-customize-control.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the current Customizer control is rendered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Control instance.",
                        "types": [
                            "\\WP_Customize_Control"
                        ],
                        "variable": "$control"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "customize_render_control_{$this->id}",
            "file": "wp-includes/class-wp-customize-control.php",
            "type": "action",
            "doc": {
                "description": "Fires just before a specific Customizer control is rendered.",
                "long_description": "The dynamic portion of the hook name, `$this->id`, refers to the control ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Control instance.",
                        "types": [
                            "\\WP_Customize_Control"
                        ],
                        "variable": "$control"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;id</code>, refers to the control ID.</p>"
            },
            "args": 1
        },
        {
            "name": "customize_render_panel",
            "file": "wp-includes/class-wp-customize-panel.php",
            "type": "action",
            "doc": {
                "description": "Fires before rendering a Customizer panel.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Panel instance.",
                        "types": [
                            "\\WP_Customize_Panel"
                        ],
                        "variable": "$panel"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "customize_render_panel_{$this->id}",
            "file": "wp-includes/class-wp-customize-panel.php",
            "type": "action",
            "doc": {
                "description": "Fires before rendering a specific Customizer panel.",
                "long_description": "The dynamic portion of the hook name, `$this->id`, refers to the ID of the specific Customizer panel to be rendered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;id</code>, refers to the ID of the specific Customizer panel to be rendered.</p>"
            },
            "args": 0
        },
        {
            "name": "customize_render_partials_after",
            "file": "wp-includes/customize/class-wp-customize-selective-refresh.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after partials are rendered.",
                "long_description": "Plugins may do things like call wp_footer() to scrape scripts output and return them via the {@see 'customize_render_partials_response'} filter.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Selective refresh component.",
                        "types": [
                            "\\WP_Customize_Selective_Refresh"
                        ],
                        "variable": "$refresh"
                    },
                    {
                        "name": "param",
                        "content": "Placements' context data for the partials rendered in the request. The array is keyed by partial ID, with each item being an array of the placements' context data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$partials"
                    }
                ],
                "long_description_html": "<p>Plugins may do things like call wp_footer() to scrape scripts output and return them via the {@see 'customize_render_partials_response'} filter.</p>"
            },
            "args": 2
        },
        {
            "name": "customize_render_partials_before",
            "file": "wp-includes/customize/class-wp-customize-selective-refresh.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before partials are rendered.",
                "long_description": "Plugins may do things like call wp_enqueue_scripts() and gather a list of the scripts and styles which may get enqueued in the response.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Selective refresh component.",
                        "types": [
                            "\\WP_Customize_Selective_Refresh"
                        ],
                        "variable": "$refresh"
                    },
                    {
                        "name": "param",
                        "content": "Placements' context data for the partials rendered in the request. The array is keyed by partial ID, with each item being an array of the placements' context data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$partials"
                    }
                ],
                "long_description_html": "<p>Plugins may do things like call wp_enqueue_scripts() and gather a list of the scripts and styles which may get enqueued in the response.</p>"
            },
            "args": 2
        },
        {
            "name": "customize_render_section",
            "file": "wp-includes/class-wp-customize-section.php",
            "type": "action",
            "doc": {
                "description": "Fires before rendering a Customizer section.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Section instance.",
                        "types": [
                            "\\WP_Customize_Section"
                        ],
                        "variable": "$section"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "customize_render_section_{$this->id}",
            "file": "wp-includes/class-wp-customize-section.php",
            "type": "action",
            "doc": {
                "description": "Fires before rendering a specific Customizer section.",
                "long_description": "The dynamic portion of the hook name, `$this->id`, refers to the ID of the specific Customizer section to be rendered.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;id</code>, refers to the ID of the specific Customizer section to be rendered.</p>"
            },
            "args": 0
        },
        {
            "name": "customize_save",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Fires once the theme has switched in the Customizer, but before settings have been saved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "customize_save_after",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Fires after Customize settings have been saved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "customize_save_validation_before",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Fires before save validation happens.",
                "long_description": "Plugins can add just-in-time {@see 'customize_validate_{$this->ID}'} filters at this point to catch any settings registered after `customize_register`. The dynamic portion of the hook name, `$this->ID` refers to the setting ID.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": "<p>Plugins can add just-in-time {@see 'customize<em>validate</em>{$this-&gt;ID}'} filters at this point to catch any settings registered after <code>customize_register</code>. The dynamic portion of the hook name, <code>$this-&gt;ID</code> refers to the setting ID.</p>"
            },
            "args": 1
        },
        {
            "name": "customize_save_{$id_base}",
            "file": "wp-includes/class-wp-customize-setting.php",
            "type": "action",
            "doc": {
                "description": "Fires when the WP_Customize_Setting::save() method is called.",
                "long_description": "The dynamic portion of the hook name, `$id_base` refers to the base slug of the setting name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "$setting"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$id_base</code> refers to the base slug of the setting name.</p>"
            },
            "args": 1
        },
        {
            "name": "customize_update_{$this->type}",
            "file": "wp-includes/class-wp-customize-setting.php",
            "type": "action",
            "doc": {
                "description": "Fires when the WP_Customize_Setting::update() method is called for settings not handled as theme_mods or options.",
                "long_description": "The dynamic portion of the hook name, `$this->type`, refers to the type of setting.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Value of the setting.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Setting instance.",
                        "types": [
                            "\\WP_Customize_Setting"
                        ],
                        "variable": "$setting"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;type</code>, refers to the type of setting.</p>"
            },
            "args": 2
        },
        {
            "name": "dbx_post_sidebar",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires after all meta box sections have been output, before the closing #post-body div.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "deactivate_blog",
            "file": "wp-admin/network/sites.php",
            "type": "action",
            "doc": {
                "description": "Fires before a network site is deactivated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the site being deactivated.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "deactivate_plugin",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires before a plugin is deactivated.",
                "long_description": "If a plugin is silently deactivated (such as during an update), this hook does not fire.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether the plugin is deactivated for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$network_deactivating"
                    }
                ],
                "long_description_html": "<p>If a plugin is silently deactivated (such as during an update), this hook does not fire.</p>"
            },
            "args": 2
        },
        {
            "name": "deactivate_{$plugin}",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires as a specific plugin is being deactivated.",
                "long_description": "This hook is the \"deactivation\" hook used internally by register_deactivation_hook(). The dynamic portion of the hook name, `$plugin`, refers to the plugin basename.\n If a plugin is silently deactivated (such as during an update), this hook does not fire.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Whether the plugin is deactivated for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$network_deactivating"
                    }
                ],
                "long_description_html": "<p>This hook is the \"deactivation\" hook used internally by register_deactivation_hook(). The dynamic portion of the hook name, <code>$plugin</code>, refers to the plugin basename.</p> <p>If a plugin is silently deactivated (such as during an update), this hook does not fire.</p>"
            },
            "args": 1
        },
        {
            "name": "deactivated_plugin",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires after a plugin is deactivated.",
                "long_description": "If a plugin is silently deactivated (such as during an update), this hook does not fire.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin"
                    },
                    {
                        "name": "param",
                        "content": "Whether the plugin is deactivated for all sites in the network or just the current site. Multisite only. Default false.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$network_deactivating"
                    }
                ],
                "long_description_html": "<p>If a plugin is silently deactivated (such as during an update), this hook does not fire.</p>"
            },
            "args": 2
        },
        {
            "name": "delete_attachment",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires before an attachment is deleted, at the start of wp_delete_attachment().",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "delete_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a comment is deleted from the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be deleted.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "delete_link",
            "file": "wp-admin/includes/bookmark.php",
            "type": "action",
            "doc": {
                "description": "Fires before a link is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the link to delete.",
                        "types": [
                            "int"
                        ],
                        "variable": "$link_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "delete_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before an option is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option to delete.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "delete_option_{$option}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after a specific option has been deleted.",
                "long_description": "The dynamic portion of the hook name, `$option`, refers to the option name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the deleted option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>"
            },
            "args": 1
        },
        {
            "name": "delete_plugin",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a plugin deletion attempt.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin_file"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "delete_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a post is deleted from the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$postid"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "delete_postmeta",
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before deleting metadata for a post.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of metadata entry IDs to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$meta_ids"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "delete_site_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after a network option has been deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "$network_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "delete_site_option_{$option}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after a specific network option has been deleted.",
                "long_description": "The dynamic portion of the hook name, `$option`, refers to the option name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As \"delete_site<em>option</em>{$key}\""
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "$network_id"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>"
            },
            "args": 2
        },
        {
            "name": "delete_site_transient_{$transient}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a specific site transient is deleted.",
                "long_description": "The dynamic portion of the hook name, `$transient`, refers to the transient name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$transient"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>"
            },
            "args": 1
        },
        {
            "name": "delete_term",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a term is deleted from the database and the cache is cleaned.",
                "long_description": "The {@see 'delete_$taxonomy'} hook is also available for targeting a specific taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Introduced the <code>$object_ids</code> argument."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Copy of the already-deleted term.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$deleted_term"
                    },
                    {
                        "name": "param",
                        "content": "List of term object IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$object_ids"
                    }
                ],
                "long_description_html": "<p>The {@see 'delete_$taxonomy'} hook is also available for targeting a specific taxonomy.</p>"
            },
            "args": 5
        },
        {
            "name": "delete_term_relationships",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before an object-term relationship is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$taxonomy</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$tt_ids"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "delete_term_taxonomy",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a term taxonomy ID is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "delete_theme",
            "file": "wp-admin/includes/theme.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a theme deletion attempt.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Stylesheet of the theme to delete.",
                        "types": [
                            "string"
                        ],
                        "variable": "$stylesheet"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "delete_transient_{$transient}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a specific transient is deleted.",
                "long_description": "The dynamic portion of the hook name, `$transient`, refers to the transient name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$transient"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>"
            },
            "args": 1
        },
        {
            "name": "delete_user",
            "file": "wp-admin/includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a user is deleted from the site.",
                "long_description": "Note that on a Multisite installation the user only gets removed from the site and does not get deleted from the database.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$user</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to delete.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to reassign posts and links to. Default null, for no reassignment.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "$reassign"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the user to delete.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": "<p>Note that on a Multisite installation the user only gets removed from the site and does not get deleted from the database.</p>"
            },
            "args": 3
        },
        {
            "name": "delete_user_form",
            "file": "wp-admin/users.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the delete users form prior to the confirm button.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The <code>$user_ids</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "WP_User object for the current user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$current_user"
                    },
                    {
                        "name": "param",
                        "content": "Array of IDs for users being deleted.",
                        "types": [
                            "int[]"
                        ],
                        "variable": "$user_ids"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "delete_widget",
            "file": "wp-admin/widgets-form.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a widget has been marked for deletion.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the widget marked for deletion.",
                        "types": [
                            "string"
                        ],
                        "variable": "$widget_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the sidebar the widget was deleted from.",
                        "types": [
                            "string"
                        ],
                        "variable": "$sidebar_id"
                    },
                    {
                        "name": "param",
                        "content": "ID base for the widget.",
                        "types": [
                            "string"
                        ],
                        "variable": "$id_base"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "delete_{$meta_type}_meta",
            "aliases": [
                "delete_comment_meta",
                "delete_post_meta",
                "delete_term_meta",
                "delete_user_meta"
            ],
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before deleting metadata of a specific type.",
                "long_description": "The dynamic portion of the hook name, `$meta_type`, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).\n Possible hook names include:\n\n  - `delete_post_meta`\n  - `delete_comment_meta`\n  - `delete_term_meta`\n  - `delete_user_meta`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of metadata entry IDs to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$meta_ids"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$_meta_value"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$meta_type</code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).</p> <p>Possible hook names include:</p> <ul> <li><code>delete_post_meta</code></li> <li><code>delete_comment_meta</code></li> <li><code>delete_term_meta</code></li> <li><code>delete_user_meta</code></li> </ul>"
            },
            "args": 4
        },
        {
            "name": "delete_{$meta_type}meta",
            "aliases": [
                "delete_commentmeta",
                "delete_postmeta",
                "delete_termmeta",
                "delete_usermeta"
            ],
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before deleting post or comment metadata of a specific type.",
                "long_description": "The dynamic portion of the hook name, `$meta_type`, refers to the meta object type (post or comment).\n Possible hook names include:\n\n  - `delete_postmeta`\n  - `delete_commentmeta`\n  - `delete_termmeta`\n  - `delete_usermeta`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the metadata entry to delete.",
                        "types": [
                            "int"
                        ],
                        "variable": "$meta_id"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$meta_type</code>, refers to the meta object type (post or comment).</p> <p>Possible hook names include:</p> <ul> <li><code>delete_postmeta</code></li> <li><code>delete_commentmeta</code></li> <li><code>delete_termmeta</code></li> <li><code>delete_usermeta</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "delete_{$taxonomy}",
            "aliases": [
                "delete_category",
                "delete_post_tag"
            ],
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a term in a specific taxonomy is deleted.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the specific taxonomy the term belonged to.\n Possible hook names include:\n\n  - `delete_category`\n  - `delete_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Introduced the <code>$object_ids</code> argument."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Copy of the already-deleted term.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$deleted_term"
                    },
                    {
                        "name": "param",
                        "content": "List of term object IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$object_ids"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the specific taxonomy the term belonged to.</p> <p>Possible hook names include:</p> <ul> <li><code>delete_category</code></li> <li><code>delete_post_tag</code></li> </ul>"
            },
            "args": 4
        },
        {
            "name": "deleted_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment is deleted from the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The deleted comment.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "deleted_link",
            "file": "wp-admin/includes/bookmark.php",
            "type": "action",
            "doc": {
                "description": "Fires after a link has been deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted link.",
                        "types": [
                            "int"
                        ],
                        "variable": "$link_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "deleted_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after an option has been deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the deleted option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "deleted_plugin",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a plugin deletion attempt.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "Whether the plugin deletion was successful.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$deleted"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "deleted_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a post is deleted from the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$post</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$postid"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "deleted_postmeta",
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after deleting metadata for a post.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of metadata entry IDs to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$meta_ids"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "deleted_site_transient",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after a transient is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$transient"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "deleted_term_relationships",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after an object-term relationship is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "Added the <code>$taxonomy</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$tt_ids"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "deleted_term_taxonomy",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a term taxonomy ID is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "deleted_theme",
            "file": "wp-admin/includes/theme.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a theme deletion attempt.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Stylesheet of the theme to delete.",
                        "types": [
                            "string"
                        ],
                        "variable": "$stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Whether the theme deletion was successful.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$deleted"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "deleted_transient",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after a transient is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$transient"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "deleted_user",
            "file": "wp-admin/includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a user is deleted from the site.",
                "long_description": "Note that on a Multisite installation the user may not have been deleted from the database depending on whether `wp_delete_user()` or `wpmu_delete_user()` was called.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$user</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted user.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to reassign posts and links to. Default null, for no reassignment.",
                        "types": [
                            "int",
                            "null"
                        ],
                        "variable": "$reassign"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the deleted user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": "<p>Note that on a Multisite installation the user may not have been deleted from the database depending on whether <code>wp_delete_user()</code> or <code>wpmu_delete_user()</code> was called.</p>"
            },
            "args": 3
        },
        {
            "name": "deleted_{$meta_type}_meta",
            "aliases": [
                "deleted_comment_meta",
                "deleted_post_meta",
                "deleted_term_meta",
                "deleted_user_meta"
            ],
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after deleting metadata of a specific type.",
                "long_description": "The dynamic portion of the hook name, `$meta_type`, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).\n Possible hook names include:\n\n  - `deleted_post_meta`\n  - `deleted_comment_meta`\n  - `deleted_term_meta`\n  - `deleted_user_meta`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of metadata entry IDs to delete.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$meta_ids"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$_meta_value"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$meta_type</code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).</p> <p>Possible hook names include:</p> <ul> <li><code>deleted_post_meta</code></li> <li><code>deleted_comment_meta</code></li> <li><code>deleted_term_meta</code></li> <li><code>deleted_user_meta</code></li> </ul>"
            },
            "args": 4
        },
        {
            "name": "deleted_{$meta_type}meta",
            "aliases": [
                "deleted_commentmeta",
                "deleted_postmeta",
                "deleted_termmeta",
                "deleted_usermeta"
            ],
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after deleting post or comment metadata of a specific type.",
                "long_description": "The dynamic portion of the hook name, `$meta_type`, refers to the meta object type (post or comment).\n Possible hook names include:\n\n  - `deleted_postmeta`\n  - `deleted_commentmeta`\n  - `deleted_termmeta`\n  - `deleted_usermeta`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted metadata entry ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$meta_id"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$meta_type</code>, refers to the meta object type (post or comment).</p> <p>Possible hook names include:</p> <ul> <li><code>deleted_postmeta</code></li> <li><code>deleted_commentmeta</code></li> <li><code>deleted_termmeta</code></li> <li><code>deleted_usermeta</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "deprecated_argument_run",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when a deprecated argument is called.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The function that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "$function_name"
                    },
                    {
                        "name": "param",
                        "content": "A message regarding the change.",
                        "types": [
                            "string"
                        ],
                        "variable": "$message"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the argument used.",
                        "types": [
                            "string"
                        ],
                        "variable": "$version"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "deprecated_class_run",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when a deprecated class is called.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the class being instantiated.",
                        "types": [
                            "string"
                        ],
                        "variable": "$class_name"
                    },
                    {
                        "name": "param",
                        "content": "The class or function that should have been called.",
                        "types": [
                            "string"
                        ],
                        "variable": "$replacement"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the class.",
                        "types": [
                            "string"
                        ],
                        "variable": "$version"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "deprecated_constructor_run",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when a deprecated constructor is called.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Added the <code>$parent_class</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The class containing the deprecated constructor.",
                        "types": [
                            "string"
                        ],
                        "variable": "$class_name"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the function.",
                        "types": [
                            "string"
                        ],
                        "variable": "$version"
                    },
                    {
                        "name": "param",
                        "content": "The parent class calling the deprecated constructor.",
                        "types": [
                            "string"
                        ],
                        "variable": "$parent_class"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "deprecated_file_included",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when a deprecated file is called.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The file that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "$file"
                    },
                    {
                        "name": "param",
                        "content": "The file that should have been included based on ABSPATH.",
                        "types": [
                            "string"
                        ],
                        "variable": "$replacement"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$version"
                    },
                    {
                        "name": "param",
                        "content": "A message regarding the change.",
                        "types": [
                            "string"
                        ],
                        "variable": "$message"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "deprecated_function_run",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when a deprecated function is called.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The function that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "$function_name"
                    },
                    {
                        "name": "param",
                        "content": "The function that should have been called.",
                        "types": [
                            "string"
                        ],
                        "variable": "$replacement"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the function.",
                        "types": [
                            "string"
                        ],
                        "variable": "$version"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "deprecated_hook_run",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when a deprecated hook is called.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The hook that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "$hook"
                    },
                    {
                        "name": "param",
                        "content": "The hook that should be used as a replacement.",
                        "types": [
                            "string"
                        ],
                        "variable": "$replacement"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress that deprecated the argument used.",
                        "types": [
                            "string"
                        ],
                        "variable": "$version"
                    },
                    {
                        "name": "param",
                        "content": "A message regarding the change.",
                        "types": [
                            "string"
                        ],
                        "variable": "$message"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "do_all_pings",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after the `do_pings` event to hook services individually.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "do_favicon",
            "file": "wp-includes/template-loader.php",
            "type": "action",
            "doc": {
                "description": "Fired when the template loader determines a favicon.ico request.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "do_faviconico",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when serving the favicon.ico file.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "do_feed_{$feed}",
            "aliases": [
                "do_feed_atom",
                "do_feed_rdf",
                "do_feed_rss",
                "do_feed_rss2"
            ],
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires once the given feed is loaded.",
                "long_description": "The dynamic portion of the hook name, `$feed`, refers to the feed template name.\n Possible hook names include:\n\n  - `do_feed_atom`\n  - `do_feed_rdf`\n  - `do_feed_rss`\n  - `do_feed_rss2`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$feed</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Whether the feed is a comment feed.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$is_comment_feed"
                    },
                    {
                        "name": "param",
                        "content": "The feed name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$feed"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$feed</code>, refers to the feed template name.</p> <p>Possible hook names include:</p> <ul> <li><code>do_feed_atom</code></li> <li><code>do_feed_rdf</code></li> <li><code>do_feed_rss</code></li> <li><code>do_feed_rss2</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "do_meta_boxes",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires after meta boxes have been added.",
                "long_description": "Fires once for each of the default meta box contexts: normal, advanced, and side.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type of the post on Edit Post screen, 'link' on Edit Link screen, 'dashboard' on Dashboard screen.",
                        "types": [
                            "string"
                        ],
                        "variable": "$post_type"
                    },
                    {
                        "name": "param",
                        "content": "Meta box context. Possible values include 'normal', 'advanced', 'side'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    },
                    {
                        "name": "param",
                        "content": "Post object on Edit Post screen, link object on Edit Link screen, an empty string on Dashboard screen.",
                        "types": [
                            "\\WP_Post",
                            "object",
                            "string"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": "<p>Fires once for each of the default meta box contexts: normal, advanced, and side.</p>"
            },
            "args": 3
        },
        {
            "name": "do_robots",
            "file": "wp-includes/template-loader.php",
            "type": "action",
            "doc": {
                "description": "Fired when the template loader determines a robots.txt request.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "do_robotstxt",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when displaying the robots.txt file.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "doing_it_wrong_run",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when the given function is being used incorrectly.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The function that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "$function_name"
                    },
                    {
                        "name": "param",
                        "content": "A message explaining what has been done incorrectly.",
                        "types": [
                            "string"
                        ],
                        "variable": "$message"
                    },
                    {
                        "name": "param",
                        "content": "The version of WordPress where the message was added.",
                        "types": [
                            "string"
                        ],
                        "variable": "$version"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "dynamic_sidebar",
            "file": "wp-includes/widgets.php",
            "type": "action",
            "doc": {
                "description": "Fires before a widget's display callback is called.",
                "long_description": "Note: The action fires on both the front end and back end, including for widgets in the Inactive Widgets sidebar on the Widgets screen.\n The action is not fired for empty sidebars.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "{ An associative array of widget arguments. @type string   $name        Name of the widget. @type string   $id          Widget ID. @type callable $callback    When the hook is fired on the front end, <code>$callback</code> is an array containing the widget object. Fired on the back end, <code>$callback</code> is 'wp_widget_control', see <code>$_callback</code>. @type array    $params      An associative array of multi-widget arguments. @type string   $classname   CSS class applied to the widget container. @type string   $description The widget description. @type array    $_callback   When the hook is fired on the back end, <code>$_callback</code> is populated with an array containing the widget object, see <code>$callback</code>.\n}",
                        "types": [
                            "array"
                        ],
                        "variable": "$widget"
                    }
                ],
                "long_description_html": "<p>Note: The action fires on both the front end and back end, including for widgets in the Inactive Widgets sidebar on the Widgets screen.</p> <p>The action is not fired for empty sidebars.</p>"
            },
            "args": 1
        },
        {
            "name": "dynamic_sidebar_after",
            "file": "wp-includes/widgets.php",
            "type": "action",
            "doc": {
                "description": "Fires after widgets are rendered in a dynamic sidebar.",
                "long_description": "Note: The action also fires for empty sidebars, and on both the front end and back end, including the Inactive Widgets sidebar on the Widgets screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Index, name, or ID of the dynamic sidebar.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "$index"
                    },
                    {
                        "name": "param",
                        "content": "Whether the sidebar is populated with widgets. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$has_widgets"
                    }
                ],
                "long_description_html": "<p>Note: The action also fires for empty sidebars, and on both the front end and back end, including the Inactive Widgets sidebar on the Widgets screen.</p>"
            },
            "args": 2
        },
        {
            "name": "dynamic_sidebar_before",
            "file": "wp-includes/widgets.php",
            "type": "action",
            "doc": {
                "description": "Fires before widgets are rendered in a dynamic sidebar.",
                "long_description": "Note: The action also fires for empty sidebars, and on both the front end and back end, including the Inactive Widgets sidebar on the Widgets screen.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Index, name, or ID of the dynamic sidebar.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "$index"
                    },
                    {
                        "name": "param",
                        "content": "Whether the sidebar is populated with widgets. Default true.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$has_widgets"
                    }
                ],
                "long_description_html": "<p>Note: The action also fires for empty sidebars, and on both the front end and back end, including the Inactive Widgets sidebar on the Widgets screen.</p>"
            },
            "args": 2
        },
        {
            "name": "edit_attachment",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once an existing attachment has been updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment is updated in the database.",
                "long_description": "The hook also fires immediately before comment status transition hooks are fired.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Added the <code>$data</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "Comment data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$data"
                    }
                ],
                "long_description_html": "<p>The hook also fires immediately before comment status transition hooks are fired.</p>"
            },
            "args": 2
        },
        {
            "name": "edit_form_advanced",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires after 'normal' context meta boxes have been output for all post types other than 'page'.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_form_after_editor",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires after the content editor.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_form_after_title",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires after the title field.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_form_before_permalink",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires before the permalink field in the edit form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_form_top",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires at the beginning of the edit form.",
                "long_description": "At this point, the required hidden fields and nonces have already been output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": "<p>At this point, the required hidden fields and nonces have already been output.</p>"
            },
            "args": 1
        },
        {
            "name": "edit_link",
            "file": "wp-admin/includes/bookmark.php",
            "type": "action",
            "doc": {
                "description": "Fires after a link was updated in the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the link that was updated.",
                        "types": [
                            "int"
                        ],
                        "variable": "$link_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_page_form",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires after 'normal' context meta boxes have been output for the 'page' post type.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once an existing post has been updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "edit_post_{$post->post_type}",
            "aliases": [
                "edit_post_page",
                "edit_post_post"
            ],
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once an existing post has been updated.",
                "long_description": "The dynamic portion of the hook name, `$post->post_type`, refers to the post type slug.\n Possible hook names include:\n\n  - `edit_post_post`\n  - `edit_post_page`",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$post-&gt;post_type</code>, refers to the post type slug.</p> <p>Possible hook names include:</p> <ul> <li><code>edit_post_post</code></li> <li><code>edit_post_page</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "edit_term",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a term has been updated, but before the term cache has been cleaned.",
                "long_description": "The {@see 'edit_$taxonomy'} hook is also available for targeting a specific taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The {@see 'edit_$taxonomy'} hook is also available for targeting a specific taxonomy.</p>"
            },
            "args": 4
        },
        {
            "name": "edit_term_taxonomies",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a term to delete's children are reassigned a parent.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs for the given term.",
                        "types": [
                            "array"
                        ],
                        "variable": "$edit_tt_ids"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_term_taxonomy",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediate before a term-taxonomy relationship is updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "edit_terms",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before the given terms are edited.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "edit_user_created_user",
            "file": "wp-admin/includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new user has been created.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly created user or WP_Error on failure.",
                        "types": [
                            "int",
                            "\\WP_Error"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "Type of notification that should happen. See wp_send_new_user_notifications() for more information.",
                        "types": [
                            "string"
                        ],
                        "variable": "$notify"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "edit_user_profile",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires after the 'About the User' settings table on the 'Edit User' screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$profile_user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_user_profile_update",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires before the page loads on the 'Edit User' screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edit_{$taxonomy}",
            "aliases": [
                "edit_category",
                "edit_post_tag"
            ],
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a term in a specific taxonomy has been updated, but before the term cache has been cleaned.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `edit_category`\n  - `edit_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>edit_category</code></li> <li><code>edit_post_tag</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "edited_term",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a term has been updated, and the term cache has been cleaned.",
                "long_description": "The {@see 'edited_$taxonomy'} hook is also available for targeting a specific taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The {@see 'edited_$taxonomy'} hook is also available for targeting a specific taxonomy.</p>"
            },
            "args": 4
        },
        {
            "name": "edited_term_taxonomies",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a term to delete's children are reassigned a parent.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs for the given term.",
                        "types": [
                            "array"
                        ],
                        "variable": "$edit_tt_ids"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "edited_term_taxonomy",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a term-taxonomy relationship is updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "edited_terms",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a term is updated in the database, but before its term-taxonomy relationship is updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "edited_{$taxonomy}",
            "aliases": [
                "edited_category",
                "edited_post_tag"
            ],
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a term for a specific taxonomy has been updated, and the term cache has been cleaned.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `edited_category`\n  - `edited_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_update_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>edited_category</code></li> <li><code>edited_post_tag</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "embed_content",
            "file": "wp-includes/theme-compat/embed-content.php",
            "type": "action",
            "doc": {
                "description": "Prints additional content after the embed excerpt.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "embed_content_meta",
            "file": "wp-includes/theme-compat/embed-content.php",
            "type": "action",
            "doc": {
                "description": "Prints additional meta content in the embed template.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "embed_footer",
            "file": "wp-includes/theme-compat/footer-embed.php",
            "type": "action",
            "doc": {
                "description": "Prints scripts or data before the closing body tag in the embed template.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "embed_head",
            "file": "wp-includes/theme-compat/header-embed.php",
            "type": "action",
            "doc": {
                "description": "Prints scripts or data in the embed template head tag.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "end_fetch_post_thumbnail_html",
            "file": "wp-includes/post-thumbnail-template.php",
            "type": "action",
            "doc": {
                "description": "Fires after fetching the post thumbnail HTML.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "The post thumbnail ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_thumbnail_id"
                    },
                    {
                        "name": "param",
                        "content": "Requested image size. Can be any registered image size name, or an array of width and height values in pixels (in that order).",
                        "types": [
                            "string",
                            "int[]"
                        ],
                        "variable": "$size"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "enqueue_block_assets",
            "file": "wp-includes/script-loader.php",
            "type": "action",
            "doc": {
                "description": "Fires after enqueuing block assets for both editor and front-end.",
                "long_description": "Call `add_action` on any hook before 'wp_enqueue_scripts'.\n In the function call you supply, simply use `wp_enqueue_script` and `wp_enqueue_style` to add your functionality to the Gutenberg editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    }
                ],
                "long_description_html": "<p>Call <code>add_action</code> on any hook before 'wp_enqueue_scripts'.</p> <p>In the function call you supply, simply use <code>wp_enqueue_script</code> and <code>wp_enqueue_style</code> to add your functionality to the Gutenberg editor.</p>"
            },
            "args": 0
        },
        {
            "name": "enqueue_block_editor_assets",
            "file": "wp-admin/edit-form-blocks.php",
            "type": "action",
            "doc": {
                "description": "Fires after block assets have been enqueued for the editing interface.",
                "long_description": "Call `add_action` on any hook before 'admin_enqueue_scripts'.\n In the function call you supply, simply use `wp_enqueue_script` and `wp_enqueue_style` to add your functionality to the block editor.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    }
                ],
                "long_description_html": "<p>Call <code>add_action</code> on any hook before 'admin_enqueue_scripts'.</p> <p>In the function call you supply, simply use <code>wp_enqueue_script</code> and <code>wp_enqueue_style</code> to add your functionality to the block editor.</p>"
            },
            "args": 0
        },
        {
            "name": "enqueue_embed_scripts",
            "file": "wp-includes/embed.php",
            "type": "action",
            "doc": {
                "description": "Fires when scripts and styles are enqueued for the embed iframe.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "export_filters",
            "file": "wp-admin/export.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the export filters form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "export_wp",
            "file": "wp-admin/includes/export.php",
            "type": "action",
            "doc": {
                "description": "Fires at the beginning of an export, before any headers are sent.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of export arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "generate_recovery_mode_key",
            "file": "wp-includes/class-wp-recovery-mode-key-service.php",
            "type": "action",
            "doc": {
                "description": "Fires when a recovery mode key is generated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The recovery data token.",
                        "types": [
                            "string"
                        ],
                        "variable": "$token"
                    },
                    {
                        "name": "param",
                        "content": "The recovery mode key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$key"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "generate_rewrite_rules",
            "file": "wp-includes/class-wp-rewrite.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after the rewrite rules are generated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Rewrite instance (passed by reference).",
                        "types": [
                            "\\WP_Rewrite"
                        ],
                        "variable": "$wp_rewrite"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "get_footer",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before the footer template file is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "2.8.0",
                        "description": "The <code>$name</code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the specific footer file to use. Null for the default footer.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "$name"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the footer template.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "get_header",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before the header template file is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "2.8.0",
                        "description": "The <code>$name</code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the specific header file to use. Null for the default header.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "$name"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the header template.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "get_sidebar",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before the sidebar template file is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "since",
                        "content": "2.8.0",
                        "description": "The <code>$name</code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the specific sidebar file to use. Null for the default sidebar.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "$name"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the sidebar template.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "get_template_part",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before an attempt is made to locate and load a template part.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The slug name for the generic template.",
                        "types": [
                            "string"
                        ],
                        "variable": "$slug"
                    },
                    {
                        "name": "param",
                        "content": "The name of the specialized template or an empty string if there is none.",
                        "types": [
                            "string"
                        ],
                        "variable": "$name"
                    },
                    {
                        "name": "param",
                        "content": "Array of template files to search for, in order.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$templates"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the template.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "get_template_part_{$slug}",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before the specified template part file is loaded.",
                "long_description": "The dynamic portion of the hook name, `$slug`, refers to the slug name for the generic template part.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The slug name for the generic template.",
                        "types": [
                            "string"
                        ],
                        "variable": "$slug"
                    },
                    {
                        "name": "param",
                        "content": "The name of the specialized template or null if there is none.",
                        "types": [
                            "string",
                            "null"
                        ],
                        "variable": "$name"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the template.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$slug</code>, refers to the slug name for the generic template part.</p>"
            },
            "args": 3
        },
        {
            "name": "grant_super_admin",
            "file": "wp-includes/capabilities.php",
            "type": "action",
            "doc": {
                "description": "Fires before the user is granted Super Admin privileges.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user that is about to be granted Super Admin privileges.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "granted_super_admin",
            "file": "wp-includes/capabilities.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user is granted Super Admin privileges.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user that was granted Super Admin privileges.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "heartbeat_nopriv_tick",
            "file": "wp-admin/includes/ajax-actions.php",
            "type": "action",
            "doc": {
                "description": "Fires when Heartbeat ticks in no-privilege environments.",
                "long_description": "Allows the transport to be easily replaced with long-polling.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The no-priv Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "$screen_id"
                    }
                ],
                "long_description_html": "<p>Allows the transport to be easily replaced with long-polling.</p>"
            },
            "args": 2
        },
        {
            "name": "heartbeat_tick",
            "file": "wp-admin/includes/ajax-actions.php",
            "type": "action",
            "doc": {
                "description": "Fires when Heartbeat ticks in logged-in environments.",
                "long_description": "Allows the transport to be easily replaced with long-polling.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The Heartbeat response.",
                        "types": [
                            "array"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "The screen ID.",
                        "types": [
                            "string"
                        ],
                        "variable": "$screen_id"
                    }
                ],
                "long_description_html": "<p>Allows the transport to be easily replaced with long-polling.</p>"
            },
            "args": 2
        },
        {
            "name": "http_api_curl",
            "file": "wp-includes/class-wp-http-curl.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before the cURL request is executed.",
                "long_description": "Cookies are not currently handled by the HTTP API. This action allows plugins to handle cookies themselves.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The cURL handle returned by curl_init() (passed by reference).",
                        "types": [
                            "resource"
                        ],
                        "variable": "$handle"
                    },
                    {
                        "name": "param",
                        "content": "The HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "$url"
                    }
                ],
                "long_description_html": "<p>Cookies are not currently handled by the HTTP API. This action allows plugins to handle cookies themselves.</p>"
            },
            "args": 1
        },
        {
            "name": "http_api_debug",
            "file": "wp-includes/class-wp-http.php",
            "type": "action",
            "doc": {
                "description": "Fires after an HTTP API response is received and before the response is returned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "HTTP response or WP_Error object.",
                        "types": [
                            "array",
                            "\\WP_Error"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "Context under which the hook is fired.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    },
                    {
                        "name": "param",
                        "content": "HTTP transport used.",
                        "types": [
                            "string"
                        ],
                        "variable": "$class"
                    },
                    {
                        "name": "param",
                        "content": "HTTP request arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$parsed_args"
                    },
                    {
                        "name": "param",
                        "content": "The request URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "$url"
                    }
                ],
                "long_description_html": ""
            },
            "args": 5
        },
        {
            "name": "in_admin_footer",
            "file": "wp-admin/admin-footer.php",
            "type": "action",
            "doc": {
                "description": "Fires after the opening tag for the admin footer.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "in_admin_header",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Fires at the beginning of the content section in an admin page.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "in_plugin_update_message-{$file}",
            "file": "wp-admin/includes/update.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the update message container in each row of the plugins list table.",
                "long_description": "The dynamic portion of the hook name, `$file`, refers to the path of the plugin's primary file relative to the plugins directory.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin metadata. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "$plugin_data"
                    },
                    {
                        "name": "param",
                        "content": "{ An object of metadata about the available plugin update. @type string   $id           Plugin ID, e.g. <code>w.org/plugins/[plugin-name]</code>. @type string   $slug         Plugin slug. @type string   $plugin       Plugin basename. @type string   $new_version  New plugin version. @type string   $url          Plugin URL. @type string   $package      Plugin update package URL. @type string[] $icons        An array of plugin icon URLs. @type string[] $banners      An array of plugin banner URLs. @type string[] $banners_rtl  An array of plugin RTL banner URLs. @type string   $requires     The version of WordPress which the plugin requires. @type string   $tested       The version of WordPress the plugin is tested against. @type string   $requires_php The version of PHP which the plugin requires.\n}",
                        "types": [
                            "object"
                        ],
                        "variable": "$response"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$file</code>, refers to the path of the plugin's primary file relative to the plugins directory.</p>"
            },
            "args": 2
        },
        {
            "name": "in_theme_update_message-{$theme_key}",
            "file": "wp-admin/includes/update.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the update message container in each row of the themes list table.",
                "long_description": "The dynamic portion of the hook name, `$theme_key`, refers to the theme slug as found in the WordPress.org themes repository.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "$theme"
                    },
                    {
                        "name": "param",
                        "content": "{ An array of metadata about the available theme update. @type string $new_version New theme version. @type string $url         Theme URL. @type string $package     Theme update package URL.\n}",
                        "types": [
                            "array"
                        ],
                        "variable": "$response"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$theme_key</code>, refers to the theme slug as found in the WordPress.org themes repository.</p>"
            },
            "args": 2
        },
        {
            "name": "in_widget_form",
            "file": "wp-includes/class-wp-widget.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires at the end of the widget control form.",
                "long_description": "Use this hook to add extra fields to the widget form. The hook is only fired if the value passed to the 'widget_form_callback' hook is not false.\n Note: If the widget has no form, the text echoed from the default form method can be hidden using CSS.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget instance (passed by reference).",
                        "types": [
                            "\\WP_Widget"
                        ],
                        "variable": "$widget"
                    },
                    {
                        "name": "param",
                        "content": "Return null if new fields are added.",
                        "types": [
                            "null"
                        ],
                        "variable": "$return"
                    },
                    {
                        "name": "param",
                        "content": "An array of the widget's settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "$instance"
                    }
                ],
                "long_description_html": "<p>Use this hook to add extra fields to the widget form. The hook is only fired if the value passed to the 'widget_form_callback' hook is not false.</p> <p>Note: If the widget has no form, the text echoed from the default form method can be hidden using CSS.</p>"
            },
            "args": 1
        },
        {
            "name": "init",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires after WordPress has finished loading but before any headers are sent.",
                "long_description": "Most of WP is loaded at this stage, and the user is authenticated. WP continues to load on the {@see 'init'} hook that follows (e.g. widgets), and many plugins instantiate themselves on it for all sorts of reasons (e.g. they need a user, a taxonomy, etc.).\n If you wish to plug an action once WP is loaded, use the {@see 'wp_loaded'} hook below.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ],
                "long_description_html": "<p>Most of WP is loaded at this stage, and the user is authenticated. WP continues to load on the {@see 'init'} hook that follows (e.g. widgets), and many plugins instantiate themselves on it for all sorts of reasons (e.g. they need a user, a taxonomy, etc.).</p> <p>If you wish to plug an action once WP is loaded, use the {@see 'wp_loaded'} hook below.</p>"
            },
            "args": 0
        },
        {
            "name": "install_plugins_pre_{$tab}",
            "aliases": [
                "install_plugins_pre_beta",
                "install_plugins_pre_favorites",
                "install_plugins_pre_featured",
                "install_plugins_pre_plugin-information",
                "install_plugins_pre_popular",
                "install_plugins_pre_recommended",
                "install_plugins_pre_search",
                "install_plugins_pre_upload"
            ],
            "file": "wp-admin/plugin-install.php",
            "type": "action",
            "doc": {
                "description": "Fires before each tab on the Install Plugins screen is loaded.",
                "long_description": "The dynamic portion of the hook name, `$tab`, allows for targeting individual tabs.\n Possible hook names include:\n\n  - `install_plugins_pre_beta`\n  - `install_plugins_pre_favorites`\n  - `install_plugins_pre_featured`\n  - `install_plugins_pre_plugin-information`\n  - `install_plugins_pre_popular`\n  - `install_plugins_pre_recommended`\n  - `install_plugins_pre_search`\n  - `install_plugins_pre_upload`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$tab</code>, allows for targeting individual tabs.</p> <p>Possible hook names include:</p> <ul> <li><code>install_plugins_pre_beta</code></li> <li><code>install_plugins_pre_favorites</code></li> <li><code>install_plugins_pre_featured</code></li> <li><code>install_plugins_pre_plugin-information</code></li> <li><code>install_plugins_pre_popular</code></li> <li><code>install_plugins_pre_recommended</code></li> <li><code>install_plugins_pre_search</code></li> <li><code>install_plugins_pre_upload</code></li> </ul>"
            },
            "args": 0
        },
        {
            "name": "install_plugins_table_header",
            "file": "wp-admin/includes/class-wp-plugin-install-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires before the Plugin Install table header pagination is displayed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "install_plugins_{$tab}",
            "aliases": [
                "install_plugins_beta",
                "install_plugins_favorites",
                "install_plugins_featured",
                "install_plugins_plugin-information",
                "install_plugins_popular",
                "install_plugins_recommended",
                "install_plugins_search",
                "install_plugins_upload"
            ],
            "file": "wp-admin/plugin-install.php",
            "type": "action",
            "doc": {
                "description": "Fires after the plugins list table in each tab of the Install Plugins screen.",
                "long_description": "The dynamic portion of the hook name, `$tab`, allows for targeting individual tabs.\n Possible hook names include:\n\n  - `install_plugins_beta`\n  - `install_plugins_favorites`\n  - `install_plugins_featured`\n  - `install_plugins_plugin-information`\n  - `install_plugins_popular`\n  - `install_plugins_recommended`\n  - `install_plugins_search`\n  - `install_plugins_upload`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The current page number of the plugins list table.",
                        "types": [
                            "int"
                        ],
                        "variable": "$paged"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$tab</code>, allows for targeting individual tabs.</p> <p>Possible hook names include:</p> <ul> <li><code>install_plugins_beta</code></li> <li><code>install_plugins_favorites</code></li> <li><code>install_plugins_featured</code></li> <li><code>install_plugins_plugin-information</code></li> <li><code>install_plugins_popular</code></li> <li><code>install_plugins_recommended</code></li> <li><code>install_plugins_search</code></li> <li><code>install_plugins_upload</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "install_themes_pre_{$tab}",
            "aliases": [
                "install_themes_pre_block-themes",
                "install_themes_pre_dashboard",
                "install_themes_pre_featured",
                "install_themes_pre_new",
                "install_themes_pre_search",
                "install_themes_pre_updated",
                "install_themes_pre_upload"
            ],
            "file": "wp-admin/theme-install.php",
            "type": "action",
            "doc": {
                "description": "Fires before each of the tabs are rendered on the Install Themes page.",
                "long_description": "The dynamic portion of the hook name, `$tab`, refers to the current theme installation tab.\n Possible hook names include:\n\n  - `install_themes_pre_block-themes`\n  - `install_themes_pre_dashboard`\n  - `install_themes_pre_featured`\n  - `install_themes_pre_new`\n  - `install_themes_pre_search`\n  - `install_themes_pre_updated`\n  - `install_themes_pre_upload`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added the <code>install_themes_pre_block-themes</code> hook name."
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$tab</code>, refers to the current theme installation tab.</p> <p>Possible hook names include:</p> <ul> <li><code>install_themes_pre_block-themes</code></li> <li><code>install_themes_pre_dashboard</code></li> <li><code>install_themes_pre_featured</code></li> <li><code>install_themes_pre_new</code></li> <li><code>install_themes_pre_search</code></li> <li><code>install_themes_pre_updated</code></li> <li><code>install_themes_pre_upload</code></li> </ul>"
            },
            "args": 0
        },
        {
            "name": "install_themes_table_header",
            "file": "wp-admin/includes/class-wp-theme-install-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires in the Install Themes list table header.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "install_themes_{$tab}",
            "aliases": [
                "install_themes_block-themes",
                "install_themes_dashboard",
                "install_themes_featured",
                "install_themes_new",
                "install_themes_search",
                "install_themes_updated",
                "install_themes_upload"
            ],
            "file": "wp-admin/theme-install.php",
            "type": "action",
            "doc": {
                "description": "Fires at the top of each of the tabs on the Install Themes page.",
                "long_description": "The dynamic portion of the hook name, `$tab`, refers to the current theme installation tab.\n Possible hook names include:\n\n  - `install_themes_block-themes`\n  - `install_themes_dashboard`\n  - `install_themes_featured`\n  - `install_themes_new`\n  - `install_themes_search`\n  - `install_themes_updated`\n  - `install_themes_upload`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added the <code>install_themes_block-themes</code> hook name."
                    },
                    {
                        "name": "param",
                        "content": "Number of the current page of results being viewed.",
                        "types": [
                            "int"
                        ],
                        "variable": "$paged"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$tab</code>, refers to the current theme installation tab.</p> <p>Possible hook names include:</p> <ul> <li><code>install_themes_block-themes</code></li> <li><code>install_themes_dashboard</code></li> <li><code>install_themes_featured</code></li> <li><code>install_themes_new</code></li> <li><code>install_themes_search</code></li> <li><code>install_themes_updated</code></li> <li><code>install_themes_upload</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "invite_user",
            "file": "wp-admin/user-new.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after an existing user is invited to join the site, but before the notification is sent.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The invited user's ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "Array containing role information for the invited user.",
                        "types": [
                            "array"
                        ],
                        "variable": "$role"
                    },
                    {
                        "name": "param",
                        "content": "The key of the invitation.",
                        "types": [
                            "string"
                        ],
                        "variable": "$newuser_key"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "is_wp_error_instance",
            "file": "wp-includes/load.php",
            "type": "action",
            "doc": {
                "description": "Fires when `is_wp_error()` is called and its parameter is an instance of `WP_Error`.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The error object passed to <code>is_wp_error()</code>.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$thing"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "load-importer-{$importer}",
            "aliases": [
                "load-importer-blogger",
                "load-importer-livejournal",
                "load-importer-mt",
                "load-importer-rss",
                "load-importer-tumblr",
                "load-importer-wordpress",
                "load-importer-wpcat2tag"
            ],
            "file": "wp-admin/admin.php",
            "type": "action",
            "doc": {
                "description": "Fires before an importer screen is loaded.",
                "long_description": "The dynamic portion of the hook name, `$importer`, refers to the importer slug.\n Possible hook names include:\n\n  - `load-importer-blogger`\n  - `load-importer-wpcat2tag`\n  - `load-importer-livejournal`\n  - `load-importer-mt`\n  - `load-importer-rss`\n  - `load-importer-tumblr`\n  - `load-importer-wordpress`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$importer</code>, refers to the importer slug.</p> <p>Possible hook names include:</p> <ul> <li><code>load-importer-blogger</code></li> <li><code>load-importer-wpcat2tag</code></li> <li><code>load-importer-livejournal</code></li> <li><code>load-importer-mt</code></li> <li><code>load-importer-rss</code></li> <li><code>load-importer-tumblr</code></li> <li><code>load-importer-wordpress</code></li> </ul>"
            },
            "args": 0
        },
        {
            "name": "load-widgets.php",
            "file": "wp-admin/includes/ajax-actions.php",
            "type": "action",
            "doc": {
                "description": "Fires early when editing the widgets displayed in sidebars.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "load-{$page_hook}",
            "file": "wp-admin/admin.php",
            "type": "action",
            "doc": {
                "description": "Fires before a particular screen is loaded.",
                "long_description": "The load-* hook fires in a number of contexts. This hook is for plugin screens where a callback is provided when the screen is registered.\n The dynamic portion of the hook name, `$page_hook`, refers to a mixture of plugin page information including:\n 1. The page type. If the plugin page is registered as a submenu page, such as for    Settings, the page type would be 'settings'. Otherwise the type is 'toplevel'.\n 2. A separator of '_page_'.\n 3. The plugin basename minus the file extension.\n Together, the three parts form the `$page_hook`. Citing the example above, the hook name used would be 'load-settings_page_pluginbasename'.",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "refers": "get_plugin_page_hook()"
                    },
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": "<p>The load-* hook fires in a number of contexts. This hook is for plugin screens where a callback is provided when the screen is registered.</p> <p>The dynamic portion of the hook name, <code>$page_hook</code>, refers to a mixture of plugin page information including:</p> <ol> <li>The page type. If the plugin page is registered as a submenu page, such as for Settings, the page type would be 'settings'. Otherwise the type is 'toplevel'.</li> <li>A separator of '<em>page</em>'.</li> <li>The plugin basename minus the file extension.</li> </ol> <p>Together, the three parts form the <code>$page_hook</code>. Citing the example above, the hook name used would be 'load-settings_page_pluginbasename'.</p>"
            },
            "args": 0
        },
        {
            "name": "load-{$pagenow}",
            "file": "wp-admin/admin.php",
            "type": "action",
            "doc": {
                "description": "Fires before a particular screen is loaded.",
                "long_description": "The load-* hook fires in a number of contexts. This hook is for core screens.\n The dynamic portion of the hook name, `$pagenow`, is a global variable referring to the filename of the current screen, such as 'admin.php', 'post-new.php' etc. A complete hook for the latter would be 'load-post-new.php'.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": "<p>The load-* hook fires in a number of contexts. This hook is for core screens.</p> <p>The dynamic portion of the hook name, <code>$pagenow</code>, is a global variable referring to the filename of the current screen, such as 'admin.php', 'post-new.php' etc. A complete hook for the latter would be 'load-post-new.php'.</p>"
            },
            "args": 0
        },
        {
            "name": "load-{$plugin_page}",
            "file": "wp-admin/admin.php",
            "type": "action",
            "doc": {
                "description": "Fires before a particular screen is loaded.",
                "long_description": "The load-* hook fires in a number of contexts. This hook is for plugin screens where the file to load is directly included, rather than the use of a function.\n The dynamic portion of the hook name, `$plugin_page`, refers to the plugin basename.",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "refers": "plugin_basename()"
                    },
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ],
                "long_description_html": "<p>The load-* hook fires in a number of contexts. This hook is for plugin screens where the file to load is directly included, rather than the use of a function.</p> <p>The dynamic portion of the hook name, <code>$plugin_page</code>, refers to the plugin basename.</p>"
            },
            "args": 0
        },
        {
            "name": "load_feed_engine",
            "file": "wp-includes/rss.php",
            "type": "action",
            "doc": {
                "description": "Fires before MagpieRSS is loaded, to optionally replace it.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "deprecated",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "load_textdomain",
            "file": "wp-includes/l10n.php",
            "type": "action",
            "doc": {
                "description": "Fires before the MO translation file is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "$domain"
                    },
                    {
                        "name": "param",
                        "content": "Path to the .mo file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$mofile"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "login_enqueue_scripts",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Enqueues scripts and styles for the login page.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "login_footer",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires in the login page footer.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "login_form",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires following the 'Password' field in the login form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "login_form_{$action}",
            "aliases": [
                "login_form_checkemail",
                "login_form_confirm_admin_email",
                "login_form_confirmaction",
                "login_form_entered_recovery_mode",
                "login_form_login",
                "login_form_logout",
                "login_form_lostpassword",
                "login_form_postpass",
                "login_form_register",
                "login_form_resetpass",
                "login_form_retrievepassword",
                "login_form_rp"
            ],
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires before a specified login form action.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the action that brought the visitor to the login form.\n Possible hook names include:\n\n  - `login_form_checkemail`\n  - `login_form_confirm_admin_email`\n  - `login_form_confirmaction`\n  - `login_form_entered_recovery_mode`\n  - `login_form_login`\n  - `login_form_logout`\n  - `login_form_lostpassword`\n  - `login_form_postpass`\n  - `login_form_register`\n  - `login_form_resetpass`\n  - `login_form_retrievepassword`\n  - `login_form_rp`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the action that brought the visitor to the login form.</p> <p>Possible hook names include:</p> <ul> <li><code>login_form_checkemail</code></li> <li><code>login_form_confirm_admin_email</code></li> <li><code>login_form_confirmaction</code></li> <li><code>login_form_entered_recovery_mode</code></li> <li><code>login_form_login</code></li> <li><code>login_form_logout</code></li> <li><code>login_form_lostpassword</code></li> <li><code>login_form_postpass</code></li> <li><code>login_form_register</code></li> <li><code>login_form_resetpass</code></li> <li><code>login_form_retrievepassword</code></li> <li><code>login_form_rp</code></li> </ul>"
            },
            "args": 0
        },
        {
            "name": "login_head",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires in the login page header after scripts are enqueued.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "login_header",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires in the login page header after the body tag is opened.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "login_init",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires when the login form is initialized.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "loop_end",
            "file": "wp-includes/class-wp-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires once the loop has ended.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "loop_no_results",
            "file": "wp-includes/class-wp-query.php",
            "type": "action",
            "doc": {
                "description": "Fires if no results are found in a post query.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "loop_start",
            "file": "wp-includes/class-wp-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires once the loop is started.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "lost_password",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires before the lost password form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "since",
                        "content": "5.1.0",
                        "description": "Added the <code>$errors</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "A <code>WP_Error</code> object containing any errors generated by using invalid credentials. Note that the error object may not contain any errors.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "lostpassword_form",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the lostpassword form tags, before the hidden fields.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "lostpassword_post",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires before errors are returned from a password reset request.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$errors</code> parameter."
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "Added the <code>$user_data</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object containing any errors generated by using invalid credentials.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object if found, false if the user does not exist.",
                        "types": [
                            "\\WP_User",
                            "false"
                        ],
                        "variable": "$user_data"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "make_delete_blog",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when the 'deleted' status is added to a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "make_ham_blog",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when the 'spam' status is removed from a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "make_ham_user",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user is marked as a HAM user. Opposite of SPAM.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user marked as HAM.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "make_spam_blog",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when the 'spam' status is added to a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "make_spam_user",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user is marked as a SPAM user.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user marked as SPAM.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "make_undelete_blog",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when the 'deleted' status is removed from a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "manage_comments_custom_column",
            "file": "wp-admin/includes/class-wp-comments-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires when the default column output is displayed for a single row.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The custom column's name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "manage_comments_nav",
            "file": "wp-admin/includes/class-wp-comments-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires after the Filter submit button for comment types.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "The <code>$which</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The comment status name. Default 'All'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_status"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: Either 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$which"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "manage_link_custom_column",
            "file": "wp-admin/includes/class-wp-links-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires for each registered custom link column.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the custom column.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "Link ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$link_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "manage_media_custom_column",
            "file": "wp-admin/includes/class-wp-media-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires for each custom column in the Media list table.",
                "long_description": "Custom columns are registered using the {@see 'manage_media_columns'} filter.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the custom column.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "Attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": "<p>Custom columns are registered using the {@see 'manage_media_columns'} filter.</p>"
            },
            "args": 2
        },
        {
            "name": "manage_pages_custom_column",
            "file": "wp-admin/includes/class-wp-posts-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires in each custom column on the Posts list table.",
                "long_description": "This hook only fires if the current post type is hierarchical, such as pages.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "The current post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": "<p>This hook only fires if the current post type is hierarchical, such as pages.</p>"
            },
            "args": 2
        },
        {
            "name": "manage_plugins_custom_column",
            "file": "wp-admin/includes/class-wp-plugins-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires inside each custom column of the Plugins list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin_file"
                    },
                    {
                        "name": "param",
                        "content": "An array of plugin data. See get_plugin_data() and the {@see 'plugin_row_meta'} filter for the list of possible values.",
                        "types": [
                            "array"
                        ],
                        "variable": "$plugin_data"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "manage_posts_custom_column",
            "file": "wp-admin/includes/class-wp-posts-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires in each custom column in the Posts list table.",
                "long_description": "This hook only fires if the current post type is non-hierarchical, such as posts.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "The current post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": "<p>This hook only fires if the current post type is non-hierarchical, such as posts.</p>"
            },
            "args": 2
        },
        {
            "name": "manage_posts_extra_tablenav",
            "file": "wp-admin/includes/class-wp-posts-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately following the closing \"actions\" div in the tablenav for the posts list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$which"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "manage_sites_custom_column",
            "file": "wp-admin/includes/class-wp-ms-sites-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires for each registered custom column in the Sites list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$blog_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "manage_sites_extra_tablenav",
            "file": "wp-admin/includes/class-wp-ms-sites-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately following the closing \"actions\" div in the tablenav for the MS sites list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: Either 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$which"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "manage_themes_custom_column",
            "file": "wp-admin/includes/class-wp-ms-themes-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires inside each custom column of the Multisite themes list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "Directory name of the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$stylesheet"
                    },
                    {
                        "name": "param",
                        "content": "Current WP_Theme object.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "$theme"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "manage_users_extra_tablenav",
            "file": "wp-admin/includes/class-wp-users-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately following the closing \"actions\" div in the tablenav for the users list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$which"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "manage_{$post->post_type}_posts_custom_column",
            "aliases": [
                "manage_page_posts_custom_column",
                "manage_post_posts_custom_column"
            ],
            "file": "wp-admin/includes/class-wp-posts-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires for each custom column of a specific post type in the Posts list table.",
                "long_description": "The dynamic portion of the hook name, `$post->post_type`, refers to the post type.\n Possible hook names include:\n\n  - `manage_post_posts_custom_column`\n  - `manage_page_posts_custom_column`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the column to display.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "The current post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$post-&gt;post_type</code>, refers to the post type.</p> <p>Possible hook names include:</p> <ul> <li><code>manage_post_posts_custom_column</code></li> <li><code>manage_page_posts_custom_column</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "manage_{$this->screen->id}_custom_column",
            "file": "wp-admin/includes/class-wp-application-passwords-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires for each custom column in the Application Passwords list table.",
                "long_description": "Custom columns are registered using the {@see 'manage_application-passwords-user_columns'} filter.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the custom column.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "The application password item.",
                        "types": [
                            "array"
                        ],
                        "variable": "$item"
                    }
                ],
                "long_description_html": "<p>Custom columns are registered using the {@see 'manage_application-passwords-user_columns'} filter.</p>"
            },
            "args": 2
        },
        {
            "name": "manage_{$this->screen->id}_custom_column_js_template",
            "file": "wp-admin/includes/class-wp-application-passwords-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires in the JavaScript row template for each custom column in the Application Passwords list table.",
                "long_description": "Custom columns are registered using the {@see 'manage_application-passwords-user_columns'} filter.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the custom column.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    }
                ],
                "long_description_html": "<p>Custom columns are registered using the {@see 'manage_application-passwords-user_columns'} filter.</p>"
            },
            "args": 1
        },
        {
            "name": "mature_blog",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when the 'mature' status is added to a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "media_buttons",
            "file": "wp-includes/class-wp-editor.php",
            "type": "action",
            "doc": {
                "description": "Fires after the default media button(s) are displayed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Unique editor identifier, e.g. 'content'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$editor_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "media_upload_{$tab}",
            "file": "wp-admin/media-upload.php",
            "type": "action",
            "doc": {
                "description": "Fires inside limited and specific upload-tab views in the legacy (pre-3.5.0) media popup.",
                "long_description": "The dynamic portion of the hook name, `$tab`, refers to the specific media upload tab. Possible values include 'library' (Media Library), or any custom tab registered via the {@see 'media_upload_tabs'} filter.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$tab</code>, refers to the specific media upload tab. Possible values include 'library' (Media Library), or any custom tab registered via the {@see 'media_upload_tabs'} filter.</p>"
            },
            "args": 0
        },
        {
            "name": "media_upload_{$type}",
            "aliases": [
                "media_upload_audio",
                "media_upload_file",
                "media_upload_image",
                "media_upload_video"
            ],
            "file": "wp-admin/media-upload.php",
            "type": "action",
            "doc": {
                "description": "Fires inside specific upload-type views in the legacy (pre-3.5.0) media popup based on the current tab.",
                "long_description": "The dynamic portion of the hook name, `$type`, refers to the specific media upload type.\n The hook only fires if the current `$tab` is 'type' (From Computer), 'type_url' (From URL), or, if the tab does not exist (i.e., has not been registered via the {@see 'media_upload_tabs'} filter.\n Possible hook names include:\n\n  - `media_upload_audio`\n  - `media_upload_file`\n  - `media_upload_image`\n  - `media_upload_video`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$type</code>, refers to the specific media upload type.</p> <p>The hook only fires if the current <code>$tab</code> is 'type' (From Computer), 'type_url' (From URL), or, if the tab does not exist (i.e., has not been registered via the {@see 'media_upload_tabs'} filter.</p> <p>Possible hook names include:</p> <ul> <li><code>media_upload_audio</code></li> <li><code>media_upload_file</code></li> <li><code>media_upload_image</code></li> <li><code>media_upload_video</code></li> </ul>"
            },
            "args": 0
        },
        {
            "name": "metadata_lazyloader_queued_objects",
            "file": "wp-includes/class-wp-metadata-lazyloader.php",
            "type": "action",
            "doc": {
                "description": "Fires after objects are added to the metadata lazy-load queue.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of object IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$object_ids"
                    },
                    {
                        "name": "param",
                        "content": "Type of object being queued.",
                        "types": [
                            "string"
                        ],
                        "variable": "$object_type"
                    },
                    {
                        "name": "param",
                        "content": "The lazy-loader object.",
                        "types": [
                            "\\WP_Metadata_Lazyloader"
                        ],
                        "variable": "$lazyloader"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "ms_loaded",
            "file": "wp-includes/ms-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires after the current site and network have been detected and loaded in multisite's bootstrap.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "ms_network_not_found",
            "file": "wp-includes/ms-load.php",
            "type": "action",
            "doc": {
                "description": "Fires when a network cannot be found based on the requested domain and path.",
                "long_description": "At the time of this action, the only recourse is to redirect somewhere and exit. If you want to declare a particular network, do so earlier.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The domain used to search for a network.",
                        "types": [
                            "string"
                        ],
                        "variable": "$domain"
                    },
                    {
                        "name": "param",
                        "content": "The path used to search for a path.",
                        "types": [
                            "string"
                        ],
                        "variable": "$path"
                    }
                ],
                "long_description_html": "<p>At the time of this action, the only recourse is to redirect somewhere and exit. If you want to declare a particular network, do so earlier.</p>"
            },
            "args": 2
        },
        {
            "name": "ms_site_not_found",
            "file": "wp-includes/ms-load.php",
            "type": "action",
            "doc": {
                "description": "Fires when a network can be determined but a site cannot.",
                "long_description": "At the time of this action, the only recourse is to redirect somewhere and exit. If you want to declare a particular site, do so earlier.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The network that had been determined.",
                        "types": [
                            "\\WP_Network"
                        ],
                        "variable": "$current_site"
                    },
                    {
                        "name": "param",
                        "content": "The domain used to search for a site.",
                        "types": [
                            "string"
                        ],
                        "variable": "$domain"
                    },
                    {
                        "name": "param",
                        "content": "The path used to search for a site.",
                        "types": [
                            "string"
                        ],
                        "variable": "$path"
                    }
                ],
                "long_description_html": "<p>At the time of this action, the only recourse is to redirect somewhere and exit. If you want to declare a particular site, do so earlier.</p>"
            },
            "args": 3
        },
        {
            "name": "mu_activity_box_end",
            "file": "wp-admin/includes/dashboard.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "mu_plugin_loaded",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires once a single must-use plugin has loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the plugin's main file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$mu_plugin"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "mu_rightnow_end",
            "file": "wp-admin/includes/dashboard.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "muplugins_loaded",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires once all must-use and network-activated plugins have loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "myblogs_allblogs_options",
            "file": "wp-admin/my-sites.php",
            "type": "action",
            "doc": {
                "description": "Fires before the sites list on the My Sites screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "network_admin_edit_{$action}",
            "file": "wp-admin/network/edit.php",
            "type": "action",
            "doc": {
                "description": "Fires the requested handler action.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the name of the requested action derived from the `GET` request.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the name of the requested action derived from the <code>GET</code> request.</p>"
            },
            "args": 0
        },
        {
            "name": "network_admin_menu",
            "file": "wp-admin/includes/menu.php",
            "type": "action",
            "doc": {
                "description": "Fires before the administration menu loads in the Network Admin.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty context.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "network_admin_notices",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Prints network admin screen notices.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "network_plugin_loaded",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires once a single network-activated plugin has loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the plugin's main file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$network_plugin"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "network_site_info_form",
            "file": "wp-admin/network/site-info.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the site info form in network admin.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "network_site_new_created_user",
            "file": "wp-admin/network/site-new.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new user has been created via the network site-new.php page.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly created user.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "network_site_new_form",
            "file": "wp-admin/network/site-new.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the new site form in network admin.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "network_site_users_after_list_table",
            "file": "wp-admin/network/site-users.php",
            "type": "action",
            "doc": {
                "description": "Fires after the list table on the Users screen in the Multisite Network Admin.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "network_site_users_created_user",
            "file": "wp-admin/network/site-users.php",
            "type": "action",
            "doc": {
                "description": "Fires after a user has been created via the network site-users.php page.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly created user.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "network_user_new_created_user",
            "file": "wp-admin/network/user-new.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new user has been created via the network user-new.php page.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly created user.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "network_user_new_form",
            "file": "wp-admin/network/user-new.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the new user form in network admin.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "opml_head",
            "file": "wp-links-opml.php",
            "type": "action",
            "doc": {
                "description": "Fires in the OPML header.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "page_attributes_meta_box_template",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after the label inside the 'Template' section of the 'Page Attributes' meta box.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The template used for the current post.",
                        "types": [
                            "string",
                            "false"
                        ],
                        "variable": "$template"
                    },
                    {
                        "name": "param",
                        "content": "The current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "page_attributes_misc_attributes",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires before the help hint text in the 'Page Attributes' meta box.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "parse_comment_query",
            "file": "wp-includes/class-wp-comment-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after the comment query vars have been parsed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Comment_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Comment_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "parse_network_query",
            "file": "wp-includes/class-wp-network-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after the network query vars have been parsed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Network_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Network_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "parse_query",
            "file": "wp-includes/class-wp-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after the main query vars have been parsed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "parse_request",
            "file": "wp-includes/class-wp.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires once all query variables for the current request have been parsed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WordPress environment instance (passed by reference).",
                        "types": [
                            "\\WP"
                        ],
                        "variable": "$wp"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "parse_site_query",
            "file": "wp-includes/class-wp-site-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after the site query vars have been parsed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Site_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "parse_tax_query",
            "file": "wp-includes/class-wp-query.php",
            "type": "action",
            "doc": {
                "description": "Fires after taxonomy-related query vars have been parsed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance.",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "parse_term_query",
            "file": "wp-includes/class-wp-term-query.php",
            "type": "action",
            "doc": {
                "description": "Fires after term query vars have been parsed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Term_Query.",
                        "types": [
                            "\\WP_Term_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "password_reset",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires before the user's password is reset.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "New user password.",
                        "types": [
                            "string"
                        ],
                        "variable": "$new_pass"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "permalink_structure_changed",
            "file": "wp-includes/class-wp-rewrite.php",
            "type": "action",
            "doc": {
                "description": "Fires after the permalink structure is updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The previous permalink structure.",
                        "types": [
                            "string"
                        ],
                        "variable": "$old_permalink_structure"
                    },
                    {
                        "name": "param",
                        "content": "The new permalink structure.",
                        "types": [
                            "string"
                        ],
                        "variable": "$permalink_structure"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "personal_options",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the 'Personal Options' settings table on the user editing screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$profile_user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "personal_options_update",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires before the page loads on the 'Profile' editing screen.",
                "long_description": "The action only fires if the current user is editing their own profile.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": "<p>The action only fires if the current user is editing their own profile.</p>"
            },
            "args": 1
        },
        {
            "name": "phpmailer_init",
            "file": "wp-includes/pluggable.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after PHPMailer is initialized.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The PHPMailer instance (passed by reference).",
                        "types": [
                            "\\PHPMailer"
                        ],
                        "variable": "$phpmailer"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pingback_post",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post pingback has been sent.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "0.71"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "plugin_loaded",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires once a single activated plugin has loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Full path to the plugin's main file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "plugins_loaded",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires once activated plugins have loaded.",
                "long_description": "Pluggable functions are also available at this point in the loading order.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ],
                "long_description_html": "<p>Pluggable functions are also available at this point in the loading order.</p>"
            },
            "args": 0
        },
        {
            "name": "populate_options",
            "file": "wp-admin/includes/schema.php",
            "type": "action",
            "doc": {
                "description": "Fires before creating WordPress options and populating their default values.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "post-html-upload-ui",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires after the upload button in the media upload interface.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "post-plupload-upload-ui",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires after the upload interface loads.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0",
                        "description": "As 'post-flash-upload-ui'"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "post-upload-ui",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires on the post upload UI screen.",
                "long_description": "Legacy (pre-3.5.0) media workflow hook.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": "<p>Legacy (pre-3.5.0) media workflow hook.</p>"
            },
            "args": 0
        },
        {
            "name": "post_action_{$action}",
            "file": "wp-admin/post.php",
            "type": "action",
            "doc": {
                "description": "Fires for a given custom post action request.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the custom post action.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID sent with the request.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the custom post action.</p>"
            },
            "args": 1
        },
        {
            "name": "post_comment_status_meta_box-options",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the Discussion meta box on the post editing screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "post_edit_form_tag",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the post editor form tag.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "post_lock_lost_dialog",
            "file": "wp-admin/includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the dialog displayed when a user has lost the post lock.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "post_locked_dialog",
            "file": "wp-admin/includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the post locked dialog before the buttons are displayed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "The $user parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "The user with the lock for the post.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "post_stuck",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once a post has been added to the sticky list.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the post that was stuck.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "post_submitbox_minor_actions",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires after the Save Draft (or Save as Pending) and Preview (or Preview Changes) buttons in the Publish meta box.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "post_submitbox_misc_actions",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires after the post time/date setting in the Publish meta box.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added the <code>$post</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "post_submitbox_start",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires at the beginning of the publishing actions section of the Publish meta box.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$post</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "WP_Post object for the current post on Edit Post screen, null on Edit Link screen.",
                        "types": [
                            "\\WP_Post",
                            "null"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "post_unstuck",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once a post has been removed from the sticky list.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the post that was unstuck.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "post_updated",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once an existing post has been updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object following the update.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post_after"
                    },
                    {
                        "name": "param",
                        "content": "Post object before the update.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post_before"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "posts_selection",
            "file": "wp-includes/class-wp-query.php",
            "type": "action",
            "doc": {
                "description": "Fires to announce the query's current selection parameters.",
                "long_description": "For use by caching plugins.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The assembled selection query.",
                        "types": [
                            "string"
                        ],
                        "variable": "$selection"
                    }
                ],
                "long_description_html": "<p>For use by caching plugins.</p>"
            },
            "args": 1
        },
        {
            "name": "pre-html-upload-ui",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires before the upload button in the media upload interface.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "pre-plupload-upload-ui",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires before the upload interface loads.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0",
                        "description": "As 'pre-flash-upload-ui'"
                    },
                    {
                        "name": "since",
                        "content": "3.3.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "pre-upload-ui",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the legacy (pre-3.5.0) upload interface is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "pre_auto_update",
            "file": "wp-admin/includes/class-wp-automatic-updater.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately prior to an auto-update.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The type of update being checked: 'core', 'theme', 'plugin', or 'translation'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$type"
                    },
                    {
                        "name": "param",
                        "content": "The update offer.",
                        "types": [
                            "object"
                        ],
                        "variable": "$item"
                    },
                    {
                        "name": "param",
                        "content": "The filesystem context (a path) against which filesystem access and status should be checked.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "pre_comment_on_post",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires before a comment is posted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pre_current_active_plugins",
            "file": "wp-admin/plugins.php",
            "type": "action",
            "doc": {
                "description": "Fires before the plugins list table is rendered.",
                "long_description": "This hook also fires before the plugins list table is rendered in the Network Admin.\n Please note: The 'active' portion of the hook name does not refer to whether the current view is for active plugins, but rather all plugins actively-installed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of arrays containing information on all installed plugins.",
                        "types": [
                            "array[]"
                        ],
                        "variable": "$plugins_all"
                    }
                ],
                "long_description_html": "<p>This hook also fires before the plugins list table is rendered in the Network Admin.</p> <p>Please note: The 'active' portion of the hook name does not refer to whether the current view is for active plugins, but rather all plugins actively-installed.</p>"
            },
            "args": 1
        },
        {
            "name": "pre_delete_site_option_{$option}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a specific network option is deleted.",
                "long_description": "The dynamic portion of the hook name, `$option`, refers to the option name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option</code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "$network_id"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>"
            },
            "args": 2
        },
        {
            "name": "pre_delete_term",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires when deleting a term, before any modifications are made to posts or terms.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "pre_get_comments",
            "file": "wp-includes/class-wp-comment-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before comments are retrieved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Comment_Query (passed by reference).",
                        "types": [
                            "\\WP_Comment_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pre_get_networks",
            "file": "wp-includes/class-wp-network-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before networks are retrieved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Network_Query (passed by reference).",
                        "types": [
                            "\\WP_Network_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pre_get_posts",
            "file": "wp-includes/class-wp-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after the query variable object is created, but before the actual query is run.",
                "long_description": "Note: If using conditional tags, use the method versions within the passed instance (e.g. $this->is_main_query() instead of is_main_query()). This is because the functions like is_main_query() test against the global $wp_query instance, not the passed one.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": "<p>Note: If using conditional tags, use the method versions within the passed instance (e.g. $this-&gt;is_main_query() instead of is_main_query()). This is because the functions like is_main_query() test against the global $wp_query instance, not the passed one.</p>"
            },
            "args": 1
        },
        {
            "name": "pre_get_search_form",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before the search form is retrieved, at the start of get_search_form().",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0",
                        "description": "as 'get_search_form' action."
                    },
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "link",
                        "content": "<a href=\"https://core.trac.wordpress.org/ticket/19321\">https://core.trac.wordpress.org/ticket/19321</a>",
                        "link": "https://core.trac.wordpress.org/ticket/19321"
                    },
                    {
                        "name": "param",
                        "content": "The array of arguments for building the search form. See get_search_form() for information on accepted arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pre_get_sites",
            "file": "wp-includes/class-wp-site-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before sites are retrieved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Site_Query (passed by reference).",
                        "types": [
                            "\\WP_Site_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pre_get_terms",
            "file": "wp-includes/class-wp-term-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before terms are retrieved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_Term_Query (passed by reference).",
                        "types": [
                            "\\WP_Term_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pre_get_users",
            "file": "wp-includes/class-wp-user-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before the WP_User_Query has been parsed.",
                "long_description": "The passed WP_User_Query object contains the query variables, not yet passed into SQL.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_User_Query (passed by reference).",
                        "types": [
                            "\\WP_User_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": "<p>The passed WP_User_Query object contains the query variables, not yet passed into SQL.</p>"
            },
            "args": 1
        },
        {
            "name": "pre_network_site_new_created_user",
            "file": "wp-admin/network/site-new.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a new user is created via the network site-new.php page.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Email of the non-existent user.",
                        "types": [
                            "string"
                        ],
                        "variable": "$email"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pre_ping",
            "file": "wp-includes/comment.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires just before pinging back links found in a post.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Array of link URLs to be checked (passed by reference).",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$post_links"
                    },
                    {
                        "name": "param",
                        "content": "Array of link URLs already pinged (passed by reference).",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$pung"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "pre_post_update",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before an existing post is updated in the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Array of unslashed post data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$data"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "pre_trackback_post",
            "file": "wp-trackback.php",
            "type": "action",
            "doc": {
                "description": "Fires before the trackback is added to a post.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID related to the trackback.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Trackback URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "$trackback_url"
                    },
                    {
                        "name": "param",
                        "content": "Character set.",
                        "types": [
                            "string"
                        ],
                        "variable": "$charset"
                    },
                    {
                        "name": "param",
                        "content": "Trackback title.",
                        "types": [
                            "string"
                        ],
                        "variable": "$title"
                    },
                    {
                        "name": "param",
                        "content": "Trackback excerpt.",
                        "types": [
                            "string"
                        ],
                        "variable": "$excerpt"
                    },
                    {
                        "name": "param",
                        "content": "Site name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$blog_name"
                    }
                ],
                "long_description_html": ""
            },
            "args": 6
        },
        {
            "name": "pre_uninstall_plugin",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires in uninstall_plugin() immediately before the plugin is uninstalled.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Path to the plugin file relative to the plugins directory.",
                        "types": [
                            "string"
                        ],
                        "variable": "$plugin"
                    },
                    {
                        "name": "param",
                        "content": "Uninstallable plugins.",
                        "types": [
                            "array"
                        ],
                        "variable": "$uninstallable_plugins"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "pre_user_query",
            "file": "wp-includes/class-wp-user-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after the WP_User_Query has been parsed, and before the query is executed.",
                "long_description": "The passed WP_User_Query object contains SQL parts formed from parsing the given query.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current instance of WP_User_Query (passed by reference).",
                        "types": [
                            "\\WP_User_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": "<p>The passed WP_User_Query object contains SQL parts formed from parsing the given query.</p>"
            },
            "args": 1
        },
        {
            "name": "preprocess_signup_form",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires when the site sign-up form is sent.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "print_default_editor_scripts",
            "file": "wp-includes/class-wp-editor.php",
            "type": "action",
            "doc": {
                "description": "Fires when the editor scripts are loaded for later initialization, after all scripts and settings are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "print_media_templates",
            "file": "wp-includes/media-template.php",
            "type": "action",
            "doc": {
                "description": "Fires when the custom Backbone media templates are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "profile_personal_options",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires after the 'Personal Options' settings table on the 'Profile' editing screen.",
                "long_description": "The action only fires if the current user is editing their own profile.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$profile_user"
                    }
                ],
                "long_description_html": "<p>The action only fires if the current user is editing their own profile.</p>"
            },
            "args": 1
        },
        {
            "name": "profile_update",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after an existing user is updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$userdata</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "Object containing user's data prior to update.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$old_user_data"
                    },
                    {
                        "name": "param",
                        "content": "The raw array of data passed to wp_insert_user().",
                        "types": [
                            "array"
                        ],
                        "variable": "$userdata"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "publish_phone",
            "file": "wp-mail.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post submitted by email is published.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_ID"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "quick_edit_custom_box",
            "file": "wp-admin/includes/class-wp-posts-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires once for each column in Quick Edit mode.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the column to edit.",
                        "types": [
                            "string"
                        ],
                        "variable": "$column_name"
                    },
                    {
                        "name": "param",
                        "content": "The post type slug, or current screen name if this is a taxonomy list table.",
                        "types": [
                            "string"
                        ],
                        "variable": "$post_type"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy name, if any.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rdf_header",
            "file": "wp-includes/feed-rdf.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the RDF feed header.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "rdf_item",
            "file": "wp-includes/feed-rdf.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of each RDF feed item.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "rdf_ns",
            "file": "wp-includes/feed-rdf.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the feed root to add namespaces.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "register_form",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires following the 'Email' field in the user registration form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "register_new_user",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new user registration has been recorded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the newly registered user.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "register_post",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires when submitting registration form data, before the user is created.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The submitted username after being sanitized.",
                        "types": [
                            "string"
                        ],
                        "variable": "$sanitized_user_login"
                    },
                    {
                        "name": "param",
                        "content": "The submitted email.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_email"
                    },
                    {
                        "name": "param",
                        "content": "Contains any errors with submitted username and email, e.g., an empty field, an invalid username or email, or an existing username or email.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "register_setting",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before the setting is registered but after its filters are in place.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Setting group.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option_group"
                    },
                    {
                        "name": "param",
                        "content": "Setting name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option_name"
                    },
                    {
                        "name": "param",
                        "content": "Array of setting registration arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "register_sidebar",
            "file": "wp-includes/widgets.php",
            "type": "action",
            "doc": {
                "description": "Fires once a sidebar has been registered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Parsed arguments for the registered sidebar.",
                        "types": [
                            "array"
                        ],
                        "variable": "$sidebar"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "registered_post_type",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post type is registered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "Converted the <code>$post_type</code> parameter to accept a <code>WP_Post_Type</code> object."
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "$post_type"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used to register the post type.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "$post_type_object"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "registered_post_type_{$post_type}",
            "aliases": [
                "registered_post_type_page",
                "registered_post_type_post"
            ],
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after a specific post type is registered.",
                "long_description": "The dynamic portion of the filter name, `$post_type`, refers to the post type key.\n Possible hook names include:\n\n  - `registered_post_type_post`\n  - `registered_post_type_page`",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type.",
                        "types": [
                            "string"
                        ],
                        "variable": "$post_type"
                    },
                    {
                        "name": "param",
                        "content": "Arguments used to register the post type.",
                        "types": [
                            "\\WP_Post_Type"
                        ],
                        "variable": "$post_type_object"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the filter name, <code>$post_type</code>, refers to the post type key.</p> <p>Possible hook names include:</p> <ul> <li><code>registered_post_type_post</code></li> <li><code>registered_post_type_page</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "registered_taxonomy",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a taxonomy is registered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Object type or array of object types.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "$object_type"
                    },
                    {
                        "name": "param",
                        "content": "Array of taxonomy registration arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "registered_taxonomy_for_object_type",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a taxonomy is registered for an object type.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Name of the object type.",
                        "types": [
                            "string"
                        ],
                        "variable": "$object_type"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "registered_taxonomy_{$taxonomy}",
            "aliases": [
                "registered_taxonomy_category",
                "registered_taxonomy_post_tag"
            ],
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a specific taxonomy is registered.",
                "long_description": "The dynamic portion of the filter name, `$taxonomy`, refers to the taxonomy key.\n Possible hook names include:\n\n  - `registered_taxonomy_category`\n  - `registered_taxonomy_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Object type or array of object types.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "$object_type"
                    },
                    {
                        "name": "param",
                        "content": "Array of taxonomy registration arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the filter name, <code>$taxonomy</code>, refers to the taxonomy key.</p> <p>Possible hook names include:</p> <ul> <li><code>registered_taxonomy_category</code></li> <li><code>registered_taxonomy_post_tag</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "remove_user_from_blog",
            "file": "wp-includes/ms-functions.php",
            "type": "action",
            "doc": {
                "description": "Fires before a user is removed from a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "Added the <code>$reassign</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the user being removed.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the blog the user is being removed from.",
                        "types": [
                            "int"
                        ],
                        "variable": "$blog_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user to whom to reassign posts.",
                        "types": [
                            "int"
                        ],
                        "variable": "$reassign"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "remove_user_role",
            "file": "wp-includes/class-wp-user.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a role as been removed from a user.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "The removed role.",
                        "types": [
                            "string"
                        ],
                        "variable": "$role"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "render_block_core_template_part_file",
            "file": "wp-includes/blocks/template-part.php",
            "type": "action",
            "doc": {
                "description": "Fires when a block template part is loaded from a template part in the theme.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The requested template part namespaced to the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$template_part_id"
                    },
                    {
                        "name": "param",
                        "content": "The block attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "$attributes"
                    },
                    {
                        "name": "param",
                        "content": "Absolute path to the template path.",
                        "types": [
                            "string"
                        ],
                        "variable": "$template_part_file_path"
                    },
                    {
                        "name": "param",
                        "content": "The template part content.",
                        "types": [
                            "string"
                        ],
                        "variable": "$content"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "render_block_core_template_part_none",
            "file": "wp-includes/blocks/template-part.php",
            "type": "action",
            "doc": {
                "description": "Fires when a requested block template part does not exist in the database nor in the theme.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The requested template part namespaced to the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$template_part_id"
                    },
                    {
                        "name": "param",
                        "content": "The block attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "$attributes"
                    },
                    {
                        "name": "param",
                        "content": "Absolute path to the not found template path.",
                        "types": [
                            "string"
                        ],
                        "variable": "$template_part_file_path"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "render_block_core_template_part_post",
            "file": "wp-includes/blocks/template-part.php",
            "type": "action",
            "doc": {
                "description": "Fires when a block template part is loaded from a template post stored in the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The requested template part namespaced to the theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$template_part_id"
                    },
                    {
                        "name": "param",
                        "content": "The block attributes.",
                        "types": [
                            "array"
                        ],
                        "variable": "$attributes"
                    },
                    {
                        "name": "param",
                        "content": "The template part post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$template_part_post"
                    },
                    {
                        "name": "param",
                        "content": "The template part content.",
                        "types": [
                            "string"
                        ],
                        "variable": "$content"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "requests-{$hook}",
            "file": "wp-includes/class-wp-http-requests-hooks.php",
            "type": "action_reference",
            "doc": {
                "description": "Transforms a native Request hook to a WordPress action.",
                "long_description": "This action maps Requests internal hook to a native WordPress action.",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "refers": "https://github.com/WordPress/Requests/blob/master/docs/hooks.md"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Parameters from Requests internal hook.",
                        "types": [
                            "array"
                        ],
                        "variable": "$parameters"
                    },
                    {
                        "name": "param",
                        "content": "Request data in WP_Http format.",
                        "types": [
                            "array"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "URL to request.",
                        "types": [
                            "string"
                        ],
                        "variable": "$url"
                    }
                ],
                "long_description_html": "<p>This action maps Requests internal hook to a native WordPress action.</p>"
            },
            "args": 3
        },
        {
            "name": "resetpass_form",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires following the 'Strength indicator' meter in the user password reset form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "User object of the user whose password is being reset.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "rest_after_insert_application_password",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-application-passwords-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single application password is completely created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated password item.",
                        "types": [
                            "array"
                        ],
                        "variable": "$item"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating an application password, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_after_insert_attachment",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-attachments-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single attachment is completely created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$attachment"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating an attachment, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_after_insert_comment",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires completely after a comment is created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a comment, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_after_insert_nav_menu_item",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-menu-items-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single menu item is completely created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated menu item object.",
                        "types": [
                            "object"
                        ],
                        "variable": "$nav_menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a menu item, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_after_insert_user",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a user is completely created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated user object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a user, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_after_insert_{$this->post_type}",
            "aliases": [
                "rest_after_insert_attachment",
                "rest_after_insert_page",
                "rest_after_insert_post"
            ],
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single post is completely created or updated via the REST API.",
                "long_description": "The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.\n Possible hook names include:\n\n  - `rest_after_insert_post`\n  - `rest_after_insert_page`\n  - `rest_after_insert_attachment`",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a post, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type</code>, refers to the post type slug.</p> <p>Possible hook names include:</p> <ul> <li><code>rest_after_insert_post</code></li> <li><code>rest_after_insert_page</code></li> <li><code>rest_after_insert_attachment</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "rest_after_insert_{$this->taxonomy}",
            "aliases": [
                "rest_after_insert_category",
                "rest_after_insert_post_tag"
            ],
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single term is completely created or updated via the REST API.",
                "long_description": "The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `rest_after_insert_category`\n  - `rest_after_insert_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$term"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a term, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>rest_after_insert_category</code></li> <li><code>rest_after_insert_post_tag</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "rest_after_save_widget",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-widgets-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a widget is created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the widget being saved.",
                        "types": [
                            "string"
                        ],
                        "variable": "$id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the sidebar containing the widget being saved.",
                        "types": [
                            "string"
                        ],
                        "variable": "$sidebar_id"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a widget, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "rest_api_init",
            "file": "wp-includes/rest-api.php",
            "type": "action",
            "doc": {
                "description": "Fires when preparing to serve a REST API request.",
                "long_description": "Endpoint objects should be created and register their hooks on this action rather than another action to ensure they're only loaded when needed.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Server object.",
                        "types": [
                            "\\WP_REST_Server"
                        ],
                        "variable": "$wp_rest_server"
                    }
                ],
                "long_description_html": "<p>Endpoint objects should be created and register their hooks on this action rather than another action to ensure they're only loaded when needed.</p>"
            },
            "args": 1
        },
        {
            "name": "rest_delete_comment",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a comment is deleted via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The deleted comment data.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    },
                    {
                        "name": "param",
                        "content": "The response returned from the API.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_delete_nav_menu_item",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-menu-items-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a single menu item is deleted via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated menu item object.",
                        "types": [
                            "object"
                        ],
                        "variable": "$nav_menu_item"
                    },
                    {
                        "name": "param",
                        "content": "The response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_delete_revision",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-revisions-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a revision is deleted via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The revision object (if it was deleted or moved to the Trash successfully) or false or null (failure). If the revision was moved to the Trash, $result represents its new state; if it was deleted, $result represents its state before deletion.",
                        "types": [
                            "\\WP_Post",
                            "false",
                            "null"
                        ],
                        "variable": "$result"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "rest_delete_user",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a user is deleted via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The user data.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "The response returned from the API.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_delete_widget",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-widgets-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a widget is deleted via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the widget marked for deletion.",
                        "types": [
                            "string"
                        ],
                        "variable": "$widget_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the sidebar the widget was deleted from.",
                        "types": [
                            "string"
                        ],
                        "variable": "$sidebar_id"
                    },
                    {
                        "name": "param",
                        "content": "The response data, or WP_Error object on failure.",
                        "types": [
                            "\\WP_REST_Response",
                            "\\WP_Error"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "rest_delete_{$this->post_type}",
            "aliases": [
                "rest_delete_attachment",
                "rest_delete_page",
                "rest_delete_post"
            ],
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a single post is deleted or trashed via the REST API.",
                "long_description": "They dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.\n Possible hook names include:\n\n  - `rest_delete_post`\n  - `rest_delete_page`\n  - `rest_delete_attachment`",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The deleted or trashed post.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "The response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": "<p>They dynamic portion of the hook name, <code>$this-&gt;post_type</code>, refers to the post type slug.</p> <p>Possible hook names include:</p> <ul> <li><code>rest_delete_post</code></li> <li><code>rest_delete_page</code></li> <li><code>rest_delete_attachment</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "rest_delete_{$this->taxonomy}",
            "aliases": [
                "rest_delete_category",
                "rest_delete_post_tag"
            ],
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single term is deleted via the REST API.",
                "long_description": "The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `rest_delete_category`\n  - `rest_delete_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The deleted term.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$term"
                    },
                    {
                        "name": "param",
                        "content": "The response data.",
                        "types": [
                            "\\WP_REST_Response"
                        ],
                        "variable": "$response"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>rest_delete_category</code></li> <li><code>rest_delete_post_tag</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "rest_insert_attachment",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-attachments-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single attachment is created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated attachment object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$attachment"
                    },
                    {
                        "name": "param",
                        "content": "The request sent to the API.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating an attachment, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_insert_comment",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a comment is created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a comment, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_insert_nav_menu_item",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-menu-items-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single menu item is created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated menu item object.",
                        "types": [
                            "object"
                        ],
                        "variable": "$nav_menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a menu item, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_insert_user",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a user is created or updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated user object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a user, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "rest_insert_{$this->post_type}",
            "aliases": [
                "rest_insert_attachment",
                "rest_insert_page",
                "rest_insert_post"
            ],
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single post is created or updated via the REST API.",
                "long_description": "The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.\n Possible hook names include:\n\n  - `rest_insert_post`\n  - `rest_insert_page`\n  - `rest_insert_attachment`",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a post, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type</code>, refers to the post type slug.</p> <p>Possible hook names include:</p> <ul> <li><code>rest_insert_post</code></li> <li><code>rest_insert_page</code></li> <li><code>rest_insert_attachment</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "rest_insert_{$this->taxonomy}",
            "aliases": [
                "rest_insert_category",
                "rest_insert_post_tag"
            ],
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a single term is created or updated via the REST API.",
                "long_description": "The dynamic portion of the hook name, `$this->taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `rest_insert_category`\n  - `rest_insert_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Inserted or updated term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$term"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "True when creating a term, false when updating.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$creating"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>rest_insert_category</code></li> <li><code>rest_insert_post_tag</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "rest_save_sidebar",
            "file": "wp-includes/rest-api/endpoints/class-wp-rest-sidebars-controller.php",
            "type": "action",
            "doc": {
                "description": "Fires after a sidebar is updated via the REST API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The updated sidebar.",
                        "types": [
                            "array"
                        ],
                        "variable": "$sidebar"
                    },
                    {
                        "name": "param",
                        "content": "Request object.",
                        "types": [
                            "\\WP_REST_Request"
                        ],
                        "variable": "$request"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "restore_previous_locale",
            "file": "wp-includes/class-wp-locale-switcher.php",
            "type": "action",
            "doc": {
                "description": "Fires when the locale is restored to the previous one.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The new locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "$locale"
                    },
                    {
                        "name": "param",
                        "content": "The previous locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "$previous_locale"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "restrict_manage_comments",
            "file": "wp-admin/includes/class-wp-comments-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the Filter submit button for comment types.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "restrict_manage_posts",
            "file": "wp-admin/includes/class-wp-posts-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires before the Filter button on the Posts and Pages list tables.",
                "long_description": "The Filter button allows sorting by date and/or category on the Posts list table, and sorting by date on the Pages list table.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$post_type</code> parameter was added."
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "The <code>$which</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The post type slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$post_type"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom' for WP_Posts_List_Table, 'bar' for WP_Media_List_Table.",
                        "types": [
                            "string"
                        ],
                        "variable": "$which"
                    }
                ],
                "long_description_html": "<p>The Filter button allows sorting by date and/or category on the Posts list table, and sorting by date on the Pages list table.</p>"
            },
            "args": 2
        },
        {
            "name": "restrict_manage_sites",
            "file": "wp-admin/includes/class-wp-ms-sites-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires before the Filter button on the MS sites list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: Either 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$which"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "restrict_manage_users",
            "file": "wp-admin/includes/class-wp-users-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the closing div containing the bulk role-change controls in the Users list table.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "The <code>$which</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The location of the extra table nav markup: 'top' or 'bottom'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$which"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "retrieve_password",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires before a new password is retrieved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "param",
                        "content": "The user login name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_login"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "retrieve_password_key",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires when a password reset key is generated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The username for the user.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_login"
                    },
                    {
                        "name": "param",
                        "content": "The generated password reset key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$key"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "revoke_super_admin",
            "file": "wp-includes/capabilities.php",
            "type": "action",
            "doc": {
                "description": "Fires before the user's Super Admin privileges are revoked.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user Super Admin privileges are being revoked from.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "revoked_super_admin",
            "file": "wp-includes/capabilities.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user's Super Admin privileges are revoked.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the user Super Admin privileges were revoked from.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "rightnow_end",
            "file": "wp-admin/includes/dashboard.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the 'At a Glance' dashboard widget.",
                "long_description": "Prior to 3.8.0, the widget was named 'Right Now'.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": "<p>Prior to 3.8.0, the widget was named 'Right Now'.</p>"
            },
            "args": 0
        },
        {
            "name": "rss2_comments_ns",
            "file": "wp-includes/feed-rss2-comments.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the RSS root to add namespaces.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "rss2_head",
            "file": "wp-includes/feed-rss2.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the RSS2 Feed Header.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "rss2_item",
            "file": "wp-includes/feed-rss2.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of each RSS2 feed item.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "rss2_ns",
            "file": "wp-includes/feed-rss2.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the RSS root to add namespaces.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "rss_head",
            "file": "wp-includes/feed-rss.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the RSS Feed Header.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "rss_item",
            "file": "wp-includes/feed-rss.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of each RSS feed item.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "rss_tag_pre",
            "file": "wp-includes/feed-rss2.php",
            "type": "action",
            "doc": {
                "description": "Fires between the xml and rss tags in a feed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Type of feed. Possible values include 'rss2', 'rss2-comments', 'rdf', 'atom', and 'atom-comments'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "sanitize_comment_cookies",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires when comment cookies are sanitized.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.11"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "save_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once a post has been saved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$update"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "save_post_{$post->post_type}",
            "aliases": [
                "save_post_page",
                "save_post_post"
            ],
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once a post has been saved.",
                "long_description": "The dynamic portion of the hook name, `$post->post_type`, refers to the post type slug.\n Possible hook names include:\n\n  - `save_post_post`\n  - `save_post_page`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$update"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$post-&gt;post_type</code>, refers to the post type slug.</p> <p>Possible hook names include:</p> <ul> <li><code>save_post_post</code></li> <li><code>save_post_page</code></li> </ul>"
            },
            "args": 3
        },
        {
            "name": "saved_term",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a term has been saved, and the term cache has been cleared.",
                "long_description": "The {@see 'saved_$taxonomy'} hook is also available for targeting a specific taxonomy.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing term being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$update"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The {@see 'saved_$taxonomy'} hook is also available for targeting a specific taxonomy.</p>"
            },
            "args": 5
        },
        {
            "name": "saved_{$taxonomy}",
            "aliases": [
                "saved_category",
                "saved_post_tag"
            ],
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a term in a specific taxonomy has been saved, and the term cache has been cleared.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `saved_category`\n  - `saved_post_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "The <code>$args</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Term ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "Term taxonomy ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$tt_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing term being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$update"
                    },
                    {
                        "name": "param",
                        "content": "Arguments passed to wp_insert_term().",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>saved_category</code></li> <li><code>saved_post_tag</code></li> </ul>"
            },
            "args": 4
        },
        {
            "name": "send_headers",
            "file": "wp-includes/class-wp.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires once the requested HTTP headers for caching, content type, etc. have been sent.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WordPress environment instance (passed by reference).",
                        "types": [
                            "\\WP"
                        ],
                        "variable": "$wp"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "set_404",
            "file": "wp-includes/class-wp-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires after a 404 is triggered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Query instance (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "set_auth_cookie",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before the authentication cookie is set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$token</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Authentication cookie value.",
                        "types": [
                            "string"
                        ],
                        "variable": "$auth_cookie"
                    },
                    {
                        "name": "param",
                        "content": "The time the login grace period expires as a UNIX timestamp. Default is 12 hours past the cookie's expiration time.",
                        "types": [
                            "int"
                        ],
                        "variable": "$expire"
                    },
                    {
                        "name": "param",
                        "content": "The time when the authentication cookie expires as a UNIX timestamp. Default is 14 days from now.",
                        "types": [
                            "int"
                        ],
                        "variable": "$expiration"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "Authentication scheme. Values include 'auth' or 'secure_auth'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$scheme"
                    },
                    {
                        "name": "param",
                        "content": "User's session token to use for this cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "$token"
                    }
                ],
                "long_description_html": ""
            },
            "args": 6
        },
        {
            "name": "set_comment_cookies",
            "file": "wp-comments-post.php",
            "type": "action",
            "doc": {
                "description": "Fires after comment cookies are set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.6",
                        "description": "The <code>$cookies_consent</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's user object. The user may not exist.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's consent to store cookies.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$cookies_consent"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "set_current_user",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires after the current user is set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.1"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "set_logged_in_cookie",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before the logged-in authentication cookie is set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "The <code>$token</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The logged-in cookie value.",
                        "types": [
                            "string"
                        ],
                        "variable": "$logged_in_cookie"
                    },
                    {
                        "name": "param",
                        "content": "The time the login grace period expires as a UNIX timestamp. Default is 12 hours past the cookie's expiration time.",
                        "types": [
                            "int"
                        ],
                        "variable": "$expire"
                    },
                    {
                        "name": "param",
                        "content": "The time when the logged-in authentication cookie expires as a UNIX timestamp. Default is 14 days from now.",
                        "types": [
                            "int"
                        ],
                        "variable": "$expiration"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "Authentication scheme. Default 'logged_in'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$scheme"
                    },
                    {
                        "name": "param",
                        "content": "User's session token to use for this cookie.",
                        "types": [
                            "string"
                        ],
                        "variable": "$token"
                    }
                ],
                "long_description_html": ""
            },
            "args": 6
        },
        {
            "name": "set_object_terms",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after an object's terms have been set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "Object ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of object term IDs or slugs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$terms"
                    },
                    {
                        "name": "param",
                        "content": "An array of term taxonomy IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$tt_ids"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Whether to append new terms to the old terms.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$append"
                    },
                    {
                        "name": "param",
                        "content": "Old array of term taxonomy IDs.",
                        "types": [
                            "array"
                        ],
                        "variable": "$old_tt_ids"
                    }
                ],
                "long_description_html": ""
            },
            "args": 6
        },
        {
            "name": "set_site_transient_{$transient}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after the value for a specific site transient has been set.",
                "long_description": "The dynamic portion of the hook name, `$transient`, refers to the transient name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient</code> parameter was added"
                    },
                    {
                        "name": "param",
                        "content": "Site transient value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "$expiration"
                    },
                    {
                        "name": "param",
                        "content": "Transient name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$transient"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>"
            },
            "args": 3
        },
        {
            "name": "set_transient_{$transient}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after the value for a specific transient has been set.",
                "long_description": "The dynamic portion of the hook name, `$transient`, refers to the transient name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.6.0",
                        "description": "The <code>$value</code> and <code>$expiration</code> parameters were added."
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$transient</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Transient value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "$expiration"
                    },
                    {
                        "name": "param",
                        "content": "The name of the transient.",
                        "types": [
                            "string"
                        ],
                        "variable": "$transient"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>"
            },
            "args": 3
        },
        {
            "name": "set_user_role",
            "file": "wp-includes/class-wp-user.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user's role has changed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "3.6.0",
                        "description": "Added $old_roles to include an array of the user's previous roles."
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "The new role.",
                        "types": [
                            "string"
                        ],
                        "variable": "$role"
                    },
                    {
                        "name": "param",
                        "content": "An array of the user's previous roles.",
                        "types": [
                            "string[]"
                        ],
                        "variable": "$old_roles"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "setted_site_transient",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after the value for a site transient has been set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The name of the site transient.",
                        "types": [
                            "string"
                        ],
                        "variable": "$transient"
                    },
                    {
                        "name": "param",
                        "content": "Site transient value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "$expiration"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "setted_transient",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after the value for a transient has been set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "3.6.0",
                        "description": "The <code>$value</code> and <code>$expiration</code> parameters were added."
                    },
                    {
                        "name": "param",
                        "content": "The name of the transient.",
                        "types": [
                            "string"
                        ],
                        "variable": "$transient"
                    },
                    {
                        "name": "param",
                        "content": "Transient value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "Time until expiration in seconds.",
                        "types": [
                            "int"
                        ],
                        "variable": "$expiration"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "setup_theme",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires before the theme is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "show_user_profile",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires after the 'About Yourself' settings table on the 'Profile' editing screen.",
                "long_description": "The action only fires if the current user is editing their own profile.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$profile_user"
                    }
                ],
                "long_description_html": "<p>The action only fires if the current user is editing their own profile.</p>"
            },
            "args": 1
        },
        {
            "name": "shutdown",
            "file": "wp-includes/load.php",
            "type": "action",
            "doc": {
                "description": "Fires just before PHP shuts down execution.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "sidebar_admin_page",
            "file": "wp-admin/widgets-form.php",
            "type": "action",
            "doc": {
                "description": "Fires after the available widgets and sidebars have loaded, before the admin footer.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "sidebar_admin_setup",
            "file": "wp-admin/widgets-form.php",
            "type": "action",
            "doc": {
                "description": "Fires early before the Widgets administration screen loads, after scripts are enqueued.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "signup_blogform",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires after the site sign-up form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object possibly containing 'blogname' or 'blog_title' errors.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "signup_extra_fields",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the new user account registration form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object containing 'user_name' or 'user_email' errors.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "signup_finished",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires when the site or user sign-up process is complete.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "signup_header",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires within the head section of the site sign-up screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "signup_hidden_fields",
            "file": "wp-signup.php",
            "type": "action",
            "doc": {
                "description": "Fires when hidden sign-up form fields output when creating another site or user.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "A string describing the steps of the sign-up process. The value can be 'create-another-site', 'validate-user', or 'validate-site'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "site_health_tab_content",
            "file": "wp-admin/site-health.php",
            "type": "action",
            "doc": {
                "description": "Fires when outputting the content of a custom Site Health tab.",
                "long_description": "This action fires right after the Site Health header, and users are still subject to the capability checks for the Site Health page to view any custom tabs and their contents.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The slug of the tab that was requested.",
                        "types": [
                            "string"
                        ],
                        "variable": "$tab"
                    }
                ],
                "long_description_html": "<p>This action fires right after the Site Health header, and users are still subject to the capability checks for the Site Health page to view any custom tabs and their contents.</p>"
            },
            "args": 1
        },
        {
            "name": "spam_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a comment is marked as Spam.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be marked as spam.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "spammed_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment is marked as Spam.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment marked as spam.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "split_shared_term",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a previously shared taxonomy term is split into two separate terms.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.2.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the formerly shared term.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new term created for the $term_taxonomy_id.",
                        "types": [
                            "int"
                        ],
                        "variable": "$new_term_id"
                    },
                    {
                        "name": "param",
                        "content": "ID for the term_taxonomy row affected by the split.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_taxonomy_id"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy for the split term.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "start_previewing_theme",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Fires once the Customizer theme preview has started.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "stop_previewing_theme",
            "file": "wp-includes/class-wp-customize-manager.php",
            "type": "action",
            "doc": {
                "description": "Fires once the Customizer theme preview has stopped.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Customize_Manager instance.",
                        "types": [
                            "\\WP_Customize_Manager"
                        ],
                        "variable": "$manager"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "submitlink_box",
            "file": "wp-admin/includes/meta-boxes.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the Publish box in the Link editing screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "submitpage_box",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires before meta boxes with 'side' context are output for the 'page' post type.",
                "long_description": "The submitpage box is a meta box with 'side' context, so this hook fires just before it is output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": "<p>The submitpage box is a meta box with 'side' context, so this hook fires just before it is output.</p>"
            },
            "args": 1
        },
        {
            "name": "submitpost_box",
            "file": "wp-admin/edit-form-advanced.php",
            "type": "action",
            "doc": {
                "description": "Fires before meta boxes with 'side' context are output for all post types other than 'page'.",
                "long_description": "The submitpost box is a meta box with 'side' context, so this hook fires just before it is output.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": "<p>The submitpost box is a meta box with 'side' context, so this hook fires just before it is output.</p>"
            },
            "args": 1
        },
        {
            "name": "switch_blog",
            "file": "wp-includes/ms-blogs.php",
            "type": "action",
            "doc": {
                "description": "Fires when the blog is switched.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "The <code>$context</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "New blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$new_blog_id"
                    },
                    {
                        "name": "param",
                        "content": "Previous blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$prev_blog_id"
                    },
                    {
                        "name": "param",
                        "content": "Additional context. Accepts 'switch' when called from switch_to_blog() or 'restore' when called from restore_current_blog().",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "switch_locale",
            "file": "wp-includes/class-wp-locale-switcher.php",
            "type": "action",
            "doc": {
                "description": "Fires when the locale is switched.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "since",
                        "content": "6.2.0",
                        "description": "The <code>$user_id</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The new locale.",
                        "types": [
                            "string"
                        ],
                        "variable": "$locale"
                    },
                    {
                        "name": "param",
                        "content": "User ID for context if available.",
                        "types": [
                            "false",
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "switch_theme",
            "file": "wp-includes/theme.php",
            "type": "action",
            "doc": {
                "description": "Fires after the theme is switched.",
                "long_description": "See {@see 'after_switch_theme'}.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "Introduced the <code>$old_theme</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Name of the new theme.",
                        "types": [
                            "string"
                        ],
                        "variable": "$new_name"
                    },
                    {
                        "name": "param",
                        "content": "WP_Theme instance of the new theme.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "$new_theme"
                    },
                    {
                        "name": "param",
                        "content": "WP_Theme instance of the old theme.",
                        "types": [
                            "\\WP_Theme"
                        ],
                        "variable": "$old_theme"
                    }
                ],
                "long_description_html": "<p>See {@see 'after_switch_theme'}.</p>"
            },
            "args": 3
        },
        {
            "name": "template_redirect",
            "file": "wp-includes/template-loader.php",
            "type": "action",
            "doc": {
                "description": "Fires before determining which template to load.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "the_post",
            "file": "wp-includes/class-wp-query.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires once the post data has been set up.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "since",
                        "content": "4.1.0",
                        "description": "Introduced <code>$query</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The Post object (passed by reference).",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "The current Query object (passed by reference).",
                        "types": [
                            "\\WP_Query"
                        ],
                        "variable": "$query"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "the_widget",
            "file": "wp-includes/widgets.php",
            "type": "action",
            "doc": {
                "description": "Fires before rendering the requested widget.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget's class name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$widget"
                    },
                    {
                        "name": "param",
                        "content": "The current widget instance's settings.",
                        "types": [
                            "array"
                        ],
                        "variable": "$instance"
                    },
                    {
                        "name": "param",
                        "content": "An array of the widget's sidebar arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "tool_box",
            "file": "wp-admin/tools.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the Tools Administration screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "trackback_post",
            "file": "wp-trackback.php",
            "type": "action",
            "doc": {
                "description": "Fires after a trackback is added to a post.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.2.0"
                    },
                    {
                        "name": "param",
                        "content": "Trackback ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$trackback_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "transition_comment_status",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires when the comment status is in transition.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    },
                    {
                        "name": "param",
                        "content": "The new comment status.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "$new_status"
                    },
                    {
                        "name": "param",
                        "content": "The old comment status.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "$old_status"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "transition_post_status",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires when a post is transitioned from one status to another.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "New post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "$new_status"
                    },
                    {
                        "name": "param",
                        "content": "Old post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "$old_status"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "trash_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a comment is sent to the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be trashed.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "trash_post_comments",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires before comments are sent to the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "trashed_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment is sent to Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The trashed comment.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "trashed_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post is sent to the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "6.3.0",
                        "description": "Added the <code>$previous_status</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "The status of the post at the point where it was trashed.",
                        "types": [
                            "string"
                        ],
                        "variable": "$previous_status"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "trashed_post_comments",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after comments are sent to the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Array of comment statuses.",
                        "types": [
                            "array"
                        ],
                        "variable": "$statuses"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "unarchive_blog",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when the 'archived' status is removed from a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "uninstall_{$file}",
            "file": "wp-admin/includes/plugin.php",
            "type": "action",
            "doc": {
                "description": "Fires in uninstall_plugin() once the plugin has been uninstalled.",
                "long_description": "The action concatenates the 'uninstall_' prefix with the basename of the plugin passed to uninstall_plugin() to create a dynamically-named action.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.7.0"
                    }
                ],
                "long_description_html": "<p>The action concatenates the 'uninstall_' prefix with the basename of the plugin passed to uninstall_plugin() to create a dynamically-named action.</p>"
            },
            "args": 0
        },
        {
            "name": "unload_textdomain",
            "file": "wp-includes/l10n.php",
            "type": "action",
            "doc": {
                "description": "Fires before the text domain is unloaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "6.1.0",
                        "description": "Added the <code>$reloadable</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Text domain. Unique identifier for retrieving translated strings.",
                        "types": [
                            "string"
                        ],
                        "variable": "$domain"
                    },
                    {
                        "name": "param",
                        "content": "Whether the text domain can be loaded just-in-time again.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$reloadable"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "unmature_blog",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when the 'mature' status is removed from a site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "unregister_setting",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before the setting is unregistered and after its filters have been removed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Setting group.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option_group"
                    },
                    {
                        "name": "param",
                        "content": "Setting name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option_name"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "unregistered_post_type",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post type was unregistered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Post type key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$post_type"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "unregistered_taxonomy",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a taxonomy is unregistered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "unregistered_taxonomy_for_object_type",
            "file": "wp-includes/taxonomy.php",
            "type": "action",
            "doc": {
                "description": "Fires after a taxonomy is unregistered for an object type.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Taxonomy name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    },
                    {
                        "name": "param",
                        "content": "Name of the object type.",
                        "types": [
                            "string"
                        ],
                        "variable": "$object_type"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "unspam_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a comment is unmarked as Spam.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be unmarked as spam.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "unspammed_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment is unmarked as Spam.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment unmarked as spam.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "untrash_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before a comment is restored from the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The comment to be untrashed.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "untrash_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires before a post is restored from the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "Added the <code>$previous_status</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "The status of the post at the point where it was trashed.",
                        "types": [
                            "string"
                        ],
                        "variable": "$previous_status"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "untrash_post_comments",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires before comments are restored for a post from the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "untrashed_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment is restored from the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "4.9.0",
                        "description": "Added the <code>$comment</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "The untrashed comment.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "untrashed_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post is restored from the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.0",
                        "description": "Added the <code>$previous_status</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "The status of the post at the point where it was trashed.",
                        "types": [
                            "string"
                        ],
                        "variable": "$previous_status"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "untrashed_post_comments",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires after comments are restored for a post from the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "update-core-custom_{$action}",
            "file": "wp-admin/update-core.php",
            "type": "action",
            "doc": {
                "description": "Fires for each custom update action on the WordPress Updates screen.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the passed update action. The hook fires in lieu of all available default update actions.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.2.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the passed update action. The hook fires in lieu of all available default update actions.</p>"
            },
            "args": 0
        },
        {
            "name": "update-custom_{$action}",
            "file": "wp-admin/update.php",
            "type": "action",
            "doc": {
                "description": "Fires when a custom plugin or theme update request is received.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the action provided in the request for wp-admin/update.php. Can be used to provide custom update functionality for themes and plugins.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the action provided in the request for wp-admin/update.php. Can be used to provide custom update functionality for themes and plugins.</p>"
            },
            "args": 0
        },
        {
            "name": "update_blog_public",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires after the current blog's 'public' setting is updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    },
                    {
                        "name": "param",
                        "content": "Whether the site is public. A numeric string, for compatibility reasons. Accepts '1' or '0'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$is_public"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "update_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before an option value is updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the option to update.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "The old option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$old_value"
                    },
                    {
                        "name": "param",
                        "content": "The new option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "update_option_{$option}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after the value of a specific option has been successfully updated.",
                "long_description": "The dynamic portion of the hook name, `$option`, refers to the option name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.1"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "The <code>$option</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "The old option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$old_value"
                    },
                    {
                        "name": "param",
                        "content": "The new option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "Option name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>"
            },
            "args": 3
        },
        {
            "name": "update_postmeta",
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before updating a post's metadata.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of metadata entry to update.",
                        "types": [
                            "int"
                        ],
                        "variable": "$meta_id"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value. This will be a PHP-serialized string representation of the value if the value is an array, an object, or itself a PHP-serialized string.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$meta_value"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "update_site_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after the value of a network option has been successfully updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "Current value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "Old value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$old_value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "$network_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "update_site_option_{$option}",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after the value of a specific network option has been successfully updated.",
                "long_description": "The dynamic portion of the hook name, `$option`, refers to the option name.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0",
                        "description": "As \"update_site<em>option</em>{$key}\""
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.7.0",
                        "description": "The <code>$network_id</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Name of the network option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "Current value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    },
                    {
                        "name": "param",
                        "content": "Old value of the network option.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$old_value"
                    },
                    {
                        "name": "param",
                        "content": "ID of the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "$network_id"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>"
            },
            "args": 4
        },
        {
            "name": "update_wpmu_options",
            "file": "wp-admin/network/settings.php",
            "type": "action",
            "doc": {
                "description": "Fires after the network options are updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "update_{$meta_type}_meta",
            "aliases": [
                "update_comment_meta",
                "update_post_meta",
                "update_term_meta",
                "update_user_meta"
            ],
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately before updating metadata of a specific type.",
                "long_description": "The dynamic portion of the hook name, `$meta_type`, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).\n Possible hook names include:\n\n  - `update_post_meta`\n  - `update_comment_meta`\n  - `update_term_meta`\n  - `update_user_meta`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the metadata entry to update.",
                        "types": [
                            "int"
                        ],
                        "variable": "$meta_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$_meta_value"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$meta_type</code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).</p> <p>Possible hook names include:</p> <ul> <li><code>update_post_meta</code></li> <li><code>update_comment_meta</code></li> <li><code>update_term_meta</code></li> <li><code>update_user_meta</code></li> </ul>"
            },
            "args": 4
        },
        {
            "name": "updated_option",
            "file": "wp-includes/option.php",
            "type": "action",
            "doc": {
                "description": "Fires after the value of an option has been successfully updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Name of the updated option.",
                        "types": [
                            "string"
                        ],
                        "variable": "$option"
                    },
                    {
                        "name": "param",
                        "content": "The old option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$old_value"
                    },
                    {
                        "name": "param",
                        "content": "The new option value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$value"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "updated_postmeta",
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after updating a post's metadata.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of updated metadata entry.",
                        "types": [
                            "int"
                        ],
                        "variable": "$meta_id"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value. This will be a PHP-serialized string representation of the value if the value is an array, an object, or itself a PHP-serialized string.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$meta_value"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "updated_{$meta_type}_meta",
            "aliases": [
                "updated_comment_meta",
                "updated_post_meta",
                "updated_term_meta",
                "updated_user_meta"
            ],
            "file": "wp-includes/meta.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after updating metadata of a specific type.",
                "long_description": "The dynamic portion of the hook name, `$meta_type`, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).\n Possible hook names include:\n\n  - `updated_post_meta`\n  - `updated_comment_meta`\n  - `updated_term_meta`\n  - `updated_user_meta`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of updated metadata entry.",
                        "types": [
                            "int"
                        ],
                        "variable": "$meta_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the object metadata is for.",
                        "types": [
                            "int"
                        ],
                        "variable": "$object_id"
                    },
                    {
                        "name": "param",
                        "content": "Metadata key.",
                        "types": [
                            "string"
                        ],
                        "variable": "$meta_key"
                    },
                    {
                        "name": "param",
                        "content": "Metadata value.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$_meta_value"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$meta_type</code>, refers to the meta object type (post, comment, term, user, or any other type with an associated meta table).</p> <p>Possible hook names include:</p> <ul> <li><code>updated_post_meta</code></li> <li><code>updated_comment_meta</code></li> <li><code>updated_term_meta</code></li> <li><code>updated_user_meta</code></li> </ul>"
            },
            "args": 4
        },
        {
            "name": "upgrader_overwrote_package",
            "file": "wp-admin/includes/class-plugin-upgrader.php",
            "type": "action",
            "doc": {
                "description": "Fires when the upgrader has successfully overwritten a currently installed plugin or theme with an uploaded zip package.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "The package file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$package"
                    },
                    {
                        "name": "param",
                        "content": "The new plugin or theme data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$data"
                    },
                    {
                        "name": "param",
                        "content": "The package type ('plugin' or 'theme').",
                        "types": [
                            "string"
                        ],
                        "variable": "$package_type"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "upgrader_process_complete",
            "file": "wp-admin/includes/class-wp-upgrader.php",
            "type": "action",
            "doc": {
                "description": "Fires when the upgrader process is complete.",
                "long_description": "See also {@see 'upgrader_package_options'}.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.6.0"
                    },
                    {
                        "name": "since",
                        "content": "3.7.0",
                        "description": "Added to WP_Upgrader::run()."
                    },
                    {
                        "name": "since",
                        "content": "4.6.0",
                        "description": "<code>$translations</code> was added as a possible argument to <code>$hook_extra</code>."
                    },
                    {
                        "name": "param",
                        "content": "WP_Upgrader instance. In other contexts this might be a Theme_Upgrader, Plugin_Upgrader, Core_Upgrade, or Language_Pack_Upgrader instance.",
                        "types": [
                            "\\WP_Upgrader"
                        ],
                        "variable": "$upgrader"
                    },
                    {
                        "name": "param",
                        "content": "{ Array of bulk item update data. @type string $action       Type of action. Default 'update'. @type string $type         Type of update process. Accepts 'plugin', 'theme', 'translation', or 'core'. @type bool   $bulk         Whether the update process is a bulk update. Default true. @type array  $plugins      Array of the basename paths of the plugins' main files. @type array  $themes       The theme slugs. @type array  $translations { Array of translations update data. @type string $language The locale the translation is for. @type string $type     Type of translation. Accepts 'plugin', 'theme', or 'core'. @type string $slug     Text domain the translation is for. The slug of a theme/plugin or 'default' for core translations. @type string $version  The version of a theme, plugin, or core. }\n}",
                        "types": [
                            "array"
                        ],
                        "variable": "$hook_extra"
                    }
                ],
                "long_description_html": "<p>See also {@see 'upgrader_package_options'}.</p>"
            },
            "args": 2
        },
        {
            "name": "upload_ui_over_quota",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires when an upload will exceed the defined upload space quota for a network site.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "user_admin_menu",
            "file": "wp-admin/includes/menu.php",
            "type": "action",
            "doc": {
                "description": "Fires before the administration menu loads in the User Admin.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Empty context.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "user_admin_notices",
            "file": "wp-admin/admin-header.php",
            "type": "action",
            "doc": {
                "description": "Prints user admin screen notices.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "user_edit_form_tag",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the your-profile form tag on the user editing screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "user_new_form",
            "file": "wp-admin/user-new.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the new user form.",
                "long_description": "Passes a contextual string to make both types of new user forms uniquely targetable. Contexts are 'add-existing-user' (Multisite), and 'add-new-user' (single site and network admin).",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    },
                    {
                        "name": "param",
                        "content": "A contextual string specifying which type of new user form the hook follows.",
                        "types": [
                            "string"
                        ],
                        "variable": "$type"
                    }
                ],
                "long_description_html": "<p>Passes a contextual string to make both types of new user forms uniquely targetable. Contexts are 'add-existing-user' (Multisite), and 'add-new-user' (single site and network admin).</p>"
            },
            "args": 1
        },
        {
            "name": "user_new_form_tag",
            "file": "wp-admin/user-new.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the adduser form tag.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "user_profile_update_errors",
            "file": "wp-admin/includes/user.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before user profile update errors are returned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Error object (passed by reference).",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is a user update.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$update"
                    },
                    {
                        "name": "param",
                        "content": "User object (passed by reference).",
                        "types": [
                            "\\stdClass"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "user_register",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a new user is registered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.8.0",
                        "description": "The <code>$userdata</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "The raw array of data passed to wp_insert_user().",
                        "types": [
                            "array"
                        ],
                        "variable": "$userdata"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "user_request_action_confirmed",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires an action hook when the account action has been confirmed by the user.",
                "long_description": "Using this you can assume the user has agreed to perform the action by clicking on the link in the confirmation email.\n After firing this action hook the page will redirect to wp-login a callback redirects or exits first.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "Request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$request_id"
                    }
                ],
                "long_description_html": "<p>Using this you can assume the user has agreed to perform the action by clicking on the link in the confirmation email.</p> <p>After firing this action hook the page will redirect to wp-login a callback redirects or exits first.</p>"
            },
            "args": 1
        },
        {
            "name": "validate_password_reset",
            "file": "wp-login.php",
            "type": "action",
            "doc": {
                "description": "Fires before the password reset procedure is validated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    },
                    {
                        "name": "param",
                        "content": "WP Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object if the login and reset key match. WP_Error object otherwise.",
                        "types": [
                            "\\WP_User",
                            "\\WP_Error"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "welcome_panel",
            "file": "wp-admin/index.php",
            "type": "action",
            "doc": {
                "description": "Fires when adding content to the welcome panel on the admin dashboard.",
                "long_description": "To remove the default welcome panel, use remove_action():\n     remove_action( 'welcome_panel', 'wp_welcome_panel' );",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ],
                "long_description_html": "<p>To remove the default welcome panel, use remove_action():</p> <pre><code>remove_action( 'welcome_panel', 'wp_welcome_panel' );</code></pre>"
            },
            "args": 0
        },
        {
            "name": "widgets.php",
            "file": "wp-admin/includes/ajax-actions.php",
            "type": "action",
            "doc": {
                "description": "Fires early when editing the widgets displayed in sidebars.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "widgets_admin_page",
            "file": "wp-admin/widgets-form.php",
            "type": "action",
            "doc": {
                "description": "Fires before the Widgets administration page content loads.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "widgets_init",
            "file": "wp-includes/widgets.php",
            "type": "action",
            "doc": {
                "description": "Fires after all default WordPress widgets have been registered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp",
            "file": "wp-includes/class-wp.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires once the WordPress environment has been set up.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Current WordPress environment instance (passed by reference).",
                        "types": [
                            "\\WP"
                        ],
                        "variable": "$wp"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp-mail.php",
            "file": "wp-mail.php",
            "type": "action",
            "doc": {
                "description": "Fires to allow a plugin to do a complete takeover of Post by Email.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.9.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_add_nav_menu_item",
            "file": "wp-includes/nav-menu.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a new navigation menu item has been added.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "refers": "wp_update_nav_menu_item()"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "$menu_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new menu item.",
                        "types": [
                            "int"
                        ],
                        "variable": "$menu_item_db_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments used to update/add the menu item.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_admin_notice",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires before an admin notice is output.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The message for the admin notice.",
                        "types": [
                            "string"
                        ],
                        "variable": "$message"
                    },
                    {
                        "name": "param",
                        "content": "The arguments for the admin notice.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_after_admin_bar_render",
            "file": "wp-includes/admin-bar.php",
            "type": "action",
            "doc": {
                "description": "Fires after the admin bar is rendered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_after_insert_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once a post, its terms and meta data has been saved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$update"
                    },
                    {
                        "name": "param",
                        "content": "Null for new posts, the WP_Post object prior to the update for updated posts.",
                        "types": [
                            "null",
                            "\\WP_Post"
                        ],
                        "variable": "$post_before"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "wp_after_load_template",
            "file": "wp-includes/template.php",
            "type": "action",
            "doc": {
                "description": "Fires after a template file is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The full path to the template file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$_template_file"
                    },
                    {
                        "name": "param",
                        "content": "Whether to require_once or require.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$load_once"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the template.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_ajax_crop_image_pre_save",
            "file": "wp-admin/includes/ajax-actions.php",
            "type": "action",
            "doc": {
                "description": "Fires before a cropped image is saved.",
                "long_description": "Allows to add filters to modify the way a cropped image is saved.",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The Customizer control requesting the cropped image.",
                        "types": [
                            "string"
                        ],
                        "variable": "$context"
                    },
                    {
                        "name": "param",
                        "content": "The attachment ID of the original image.",
                        "types": [
                            "int"
                        ],
                        "variable": "$attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Path to the cropped image file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$cropped"
                    }
                ],
                "long_description_html": "<p>Allows to add filters to modify the way a cropped image is saved.</p>"
            },
            "args": 3
        },
        {
            "name": "wp_ajax_nopriv_{$action}",
            "file": "wp-admin/admin-ajax.php",
            "type": "action",
            "doc": {
                "description": "Fires non-authenticated Ajax actions for logged-out users.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the name of the Ajax action callback being fired.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the name of the Ajax action callback being fired.</p>"
            },
            "args": 0
        },
        {
            "name": "wp_ajax_{$action}",
            "file": "wp-admin/admin-ajax.php",
            "type": "action",
            "doc": {
                "description": "Fires authenticated Ajax actions for logged-in users.",
                "long_description": "The dynamic portion of the hook name, `$action`, refers to the name of the Ajax action callback being fired.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the name of the Ajax action callback being fired.</p>"
            },
            "args": 0
        },
        {
            "name": "wp_authenticate",
            "file": "wp-includes/user.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires before the user is authenticated.",
                "long_description": "The variables passed to the callbacks are passed by reference, and can be modified by callback functions.",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    },
                    {
                        "name": "todo",
                        "content": "Decide whether to deprecate the wp_authenticate action."
                    },
                    {
                        "name": "param",
                        "content": "Username (passed by reference).",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_login"
                    },
                    {
                        "name": "param",
                        "content": "User password (passed by reference).",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_password"
                    }
                ],
                "long_description_html": "<p>The variables passed to the callbacks are passed by reference, and can be modified by callback functions.</p>"
            },
            "args": 1
        },
        {
            "name": "wp_authenticate_application_password_errors",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires when an application password has been successfully checked as valid.",
                "long_description": "This allows for plugins to add additional constraints to prevent an application password from being used.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$error"
                    },
                    {
                        "name": "param",
                        "content": "The user authenticating.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "The details about the application password.",
                        "types": [
                            "array"
                        ],
                        "variable": "$item"
                    },
                    {
                        "name": "param",
                        "content": "The raw supplied password.",
                        "types": [
                            "string"
                        ],
                        "variable": "$password"
                    }
                ],
                "long_description_html": "<p>This allows for plugins to add additional constraints to prevent an application password from being used.</p>"
            },
            "args": 4
        },
        {
            "name": "wp_authorize_application_password_form",
            "file": "wp-admin/authorize-application.php",
            "type": "action",
            "doc": {
                "description": "Fires in the Authorize Application Password form before the submit buttons.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "{ The array of request data. All arguments are optional and may be empty. @type string $app_name    The suggested name of the application. @type string $success_url The URL the user will be redirected to after approving the application. @type string $reject_url  The URL the user will be redirected to after rejecting the application.\n}",
                        "types": [
                            "array"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "The user authorizing the application.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_authorize_application_password_form_approved_no_js",
            "file": "wp-admin/authorize-application.php",
            "type": "action",
            "doc": {
                "description": "Fires in the Authorize Application Password new password section in the no-JS version.",
                "long_description": "In most cases, this should be used in combination with the {@see 'wp_application_passwords_approve_app_request_success'} action to ensure that both the JS and no-JS variants are handled.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "since",
                        "content": "5.6.1",
                        "description": "Corrected action name and signature."
                    },
                    {
                        "name": "param",
                        "content": "The newly generated application password.",
                        "types": [
                            "string"
                        ],
                        "variable": "$new_password"
                    },
                    {
                        "name": "param",
                        "content": "The array of request data. All arguments are optional and may be empty.",
                        "types": [
                            "array"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "The user authorizing the application.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": "<p>In most cases, this should be used in combination with the {@see 'wp_application_passwords_approve_app_request_success'} action to ensure that both the JS and no-JS variants are handled.</p>"
            },
            "args": 3
        },
        {
            "name": "wp_authorize_application_password_request_errors",
            "file": "wp-admin/includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires before application password errors are returned.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$error"
                    },
                    {
                        "name": "param",
                        "content": "The array of request data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$request"
                    },
                    {
                        "name": "param",
                        "content": "The user authorizing the application.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_before_admin_bar_render",
            "file": "wp-includes/admin-bar.php",
            "type": "action",
            "doc": {
                "description": "Fires before the admin bar is rendered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_before_load_template",
            "file": "wp-includes/template.php",
            "type": "action",
            "doc": {
                "description": "Fires before a template file is loaded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.1.0"
                    },
                    {
                        "name": "param",
                        "content": "The full path to the template file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$_template_file"
                    },
                    {
                        "name": "param",
                        "content": "Whether to require_once or require.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$load_once"
                    },
                    {
                        "name": "param",
                        "content": "Additional arguments passed to the template.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_body_open",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Triggered after the opening body tag.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.2.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_cache_set_last_changed",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires after a cache group `last_changed` time is updated.",
                "long_description": "This may occur multiple times per page load and registered actions must be performant.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The cache group name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$group"
                    },
                    {
                        "name": "param",
                        "content": "The new last changed time.",
                        "types": [
                            "int"
                        ],
                        "variable": "$time"
                    },
                    {
                        "name": "param",
                        "content": "The previous last changed time. False if not previously set.",
                        "types": [
                            "int",
                            "false"
                        ],
                        "variable": "$previous_time"
                    }
                ],
                "long_description_html": "<p>This may occur multiple times per page load and registered actions must be performant.</p>"
            },
            "args": 3
        },
        {
            "name": "wp_check_comment_disallowed_list",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires before the comment is tested for disallowed characters or words.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment author.",
                        "types": [
                            "string"
                        ],
                        "variable": "$author"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's email.",
                        "types": [
                            "string"
                        ],
                        "variable": "$email"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's URL.",
                        "types": [
                            "string"
                        ],
                        "variable": "$url"
                    },
                    {
                        "name": "param",
                        "content": "Comment content.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's IP address.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_ip"
                    },
                    {
                        "name": "param",
                        "content": "Comment author's browser user agent.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_agent"
                    }
                ],
                "long_description_html": ""
            },
            "args": 6
        },
        {
            "name": "wp_create_application_password",
            "file": "wp-includes/class-wp-application-passwords.php",
            "type": "action",
            "doc": {
                "description": "Fires when an application password is created.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "{ The details about the created password. @type string $uuid      The unique identifier for the application password. @type string $app_id    A UUID provided by the application to uniquely identify it. @type string $name      The name of the application password. @type string $password  A one-way hash of the password. @type int    $created   Unix timestamp of when the password was created. @type null   $last_used Null. @type null   $last_ip   Null.\n}",
                        "types": [
                            "array"
                        ],
                        "variable": "$new_item"
                    },
                    {
                        "name": "param",
                        "content": "The unhashed generated application password.",
                        "types": [
                            "string"
                        ],
                        "variable": "$new_password"
                    },
                    {
                        "name": "param",
                        "content": "{ Arguments used to create the application password. @type string $name   The name of the application password. @type string $app_id A UUID provided by the application to uniquely identify it.\n}",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "wp_create_application_password_form",
            "file": "wp-admin/user-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires in the create Application Passwords form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The current WP_User object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$profile_user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_create_nav_menu",
            "file": "wp-includes/nav-menu.php",
            "type": "action",
            "doc": {
                "description": "Fires after a navigation menu is successfully created.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of menu data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$menu_data"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_creating_autosave",
            "file": "wp-admin/includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires before an autosave is stored.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.1.0"
                    },
                    {
                        "name": "since",
                        "content": "6.4.0",
                        "description": "The <code>$is_update</code> parameter was added to indicate if the autosave is being updated or was newly created."
                    },
                    {
                        "name": "param",
                        "content": "Post array - the autosave that is about to be saved.",
                        "types": [
                            "array"
                        ],
                        "variable": "$new_autosave"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing autosave.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$is_update"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_dashboard_setup",
            "file": "wp-admin/includes/dashboard.php",
            "type": "action",
            "doc": {
                "description": "Fires after core widgets for the admin dashboard have been registered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_default_scripts",
            "file": "wp-includes/class-wp-scripts.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires when the WP_Scripts instance is initialized.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Scripts instance (passed by reference).",
                        "types": [
                            "\\WP_Scripts"
                        ],
                        "variable": "$wp_scripts"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_default_styles",
            "file": "wp-includes/class-wp-styles.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires when the WP_Styles instance is initialized.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "WP_Styles instance (passed by reference).",
                        "types": [
                            "\\WP_Styles"
                        ],
                        "variable": "$wp_styles"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_delete_application_password",
            "file": "wp-includes/class-wp-application-passwords.php",
            "type": "action",
            "doc": {
                "description": "Fires when an application password is deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "The data about the application password.",
                        "types": [
                            "array"
                        ],
                        "variable": "$item"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_delete_nav_menu",
            "file": "wp-includes/nav-menu.php",
            "type": "action",
            "doc": {
                "description": "Fires after a navigation menu has been successfully deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "$term_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_delete_post_revision",
            "file": "wp-includes/revision.php",
            "type": "action",
            "doc": {
                "description": "Fires once a post revision has been deleted.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post revision ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$revision_id"
                    },
                    {
                        "name": "param",
                        "content": "Post revision object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$revision"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_delete_site",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires once a site has been deleted from the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "$old_site"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_edit_form_attachment_display",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires when an attachment type can't be rendered in the edit form.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.6.0"
                    },
                    {
                        "name": "param",
                        "content": "A post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_enqueue_code_editor",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Fires when scripts and styles are enqueued for the code editor.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Settings for the enqueued code editor.",
                        "types": [
                            "array"
                        ],
                        "variable": "$settings"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_enqueue_editor",
            "file": "wp-includes/class-wp-editor.php",
            "type": "action",
            "doc": {
                "description": "Fires when scripts and styles are enqueued for the editor.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "An array containing boolean values whether TinyMCE and Quicktags are being loaded.",
                        "types": [
                            "array"
                        ],
                        "variable": "$to_load"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_enqueue_media",
            "file": "wp-includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires at the conclusion of wp_enqueue_media().",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_enqueue_scripts",
            "file": "wp-includes/script-loader.php",
            "type": "action",
            "doc": {
                "description": "Fires when scripts and styles are enqueued.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_error_added",
            "file": "wp-includes/class-wp-error.php",
            "type": "action",
            "doc": {
                "description": "Fires when an error is added to a WP_Error object.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Error code.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "$code"
                    },
                    {
                        "name": "param",
                        "content": "Error message.",
                        "types": [
                            "string"
                        ],
                        "variable": "$message"
                    },
                    {
                        "name": "param",
                        "content": "Error data. Might be empty.",
                        "types": [
                            "mixed"
                        ],
                        "variable": "$data"
                    },
                    {
                        "name": "param",
                        "content": "The WP_Error object.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$wp_error"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "wp_feed_options",
            "file": "wp-includes/feed.php",
            "type": "action_reference",
            "doc": {
                "description": "Fires just before processing the SimplePie feed object.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "SimplePie feed object (passed by reference).",
                        "types": [
                            "\\SimplePie"
                        ],
                        "variable": "$feed"
                    },
                    {
                        "name": "param",
                        "content": "URL of feed or array of URLs of feeds to retrieve.",
                        "types": [
                            "string",
                            "string[]"
                        ],
                        "variable": "$url"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_footer",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Prints scripts or data before the closing body tag on the front end.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.1"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_head",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Prints scripts or data in the head tag on the front end.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_initialize_site",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when a site's initialization routine should be executed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "New site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "$new_site"
                    },
                    {
                        "name": "param",
                        "content": "Arguments for the initialization.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_insert_comment",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a comment is inserted into the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    },
                    {
                        "name": "param",
                        "content": "The comment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    },
                    {
                        "name": "param",
                        "content": "Comment object.",
                        "types": [
                            "\\WP_Comment"
                        ],
                        "variable": "$comment"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_insert_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires once a post has been saved.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "Whether this is an existing post being updated.",
                        "types": [
                            "bool"
                        ],
                        "variable": "$update"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_insert_site",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires once a site has been inserted into the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "New site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "$new_site"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_install",
            "file": "wp-admin/includes/upgrade.php",
            "type": "action",
            "doc": {
                "description": "Fires after a site is fully installed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The site owner.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_loaded",
            "file": "wp-settings.php",
            "type": "action",
            "doc": {
                "description": "This hook is fired once WP, all plugins, and the theme are fully loaded and instantiated.",
                "long_description": "Ajax requests should use wp-admin/admin-ajax.php. admin-ajax.php can handle requests for users not logged in.",
                "tags": [
                    {
                        "name": "link",
                        "content": "<a href=\"https://codex.wordpress.org/AJAX_in_Plugins\">https://codex.wordpress.org/AJAX_in_Plugins</a>",
                        "link": "https://codex.wordpress.org/AJAX_in_Plugins"
                    },
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": "<p>Ajax requests should use wp-admin/admin-ajax.php. admin-ajax.php can handle requests for users not logged in.</p>"
            },
            "args": 0
        },
        {
            "name": "wp_login",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user has successfully logged in.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Username.",
                        "types": [
                            "string"
                        ],
                        "variable": "$user_login"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the logged-in user.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_login_failed",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires after a user login has failed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "4.5.0",
                        "description": "The value of <code>$username</code> can now be an email address."
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "The <code>$error</code> parameter was added."
                    },
                    {
                        "name": "param",
                        "content": "Username or email address.",
                        "types": [
                            "string"
                        ],
                        "variable": "$username"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object with the authentication failure details.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$error"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_logout",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires after a user is logged out.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$user_id</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the user that was logged out.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_mail_failed",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires after a PHPMailer\\PHPMailer\\Exception is caught.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "A WP_Error object with the PHPMailer\\PHPMailer\\Exception message, and an array containing the mail recipient, subject, message, headers, and attachments.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$error"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_mail_succeeded",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires after PHPMailer has successfully sent an email.",
                "long_description": "The firing of this action does not necessarily mean that the recipient(s) received the email successfully. It only means that the `send` method above was able to process the request without any errors.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.9.0"
                    },
                    {
                        "name": "param",
                        "content": "{ An array containing the email recipient(s), subject, message, headers, and attachments. @type string[] $to          Email addresses to send message. @type string   $subject     Email subject. @type string   $message     Message contents. @type string[] $headers     Additional headers. @type string[] $attachments Paths to files to attach.\n}",
                        "types": [
                            "array"
                        ],
                        "variable": "$mail_data"
                    }
                ],
                "long_description_html": "<p>The firing of this action does not necessarily mean that the recipient(s) received the email successfully. It only means that the <code>send</code> method above was able to process the request without any errors.</p>"
            },
            "args": 1
        },
        {
            "name": "wp_maybe_auto_update",
            "file": "wp-includes/update.php",
            "type": "action",
            "doc": {
                "description": "Fires during wp_cron, starting the auto-update process.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_media_attach_action",
            "file": "wp-admin/includes/media.php",
            "type": "action",
            "doc": {
                "description": "Fires when media is attached or detached from a post.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Attach/detach action. Accepts 'attach' or 'detach'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$action"
                    },
                    {
                        "name": "param",
                        "content": "The attachment ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$attachment_id"
                    },
                    {
                        "name": "param",
                        "content": "Attachment parent ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$parent_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_meta",
            "file": "wp-includes/general-template.php",
            "type": "action",
            "doc": {
                "description": "Fires before displaying echoed content in the sidebar.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_nav_menu_item_custom_fields",
            "file": "wp-admin/includes/class-walker-nav-menu-edit.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the move buttons of a nav menu item in the menu editor.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    },
                    {
                        "name": "param",
                        "content": "Menu item ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$item_id"
                    },
                    {
                        "name": "param",
                        "content": "Menu item data object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$menu_item"
                    },
                    {
                        "name": "param",
                        "content": "Depth of menu item. Used for padding.",
                        "types": [
                            "int"
                        ],
                        "variable": "$depth"
                    },
                    {
                        "name": "param",
                        "content": "An object of menu item arguments.",
                        "types": [
                            "\\stdClass",
                            "null"
                        ],
                        "variable": "$args"
                    },
                    {
                        "name": "param",
                        "content": "Nav menu ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$current_object_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 5
        },
        {
            "name": "wp_nav_menu_item_custom_fields_customize_template",
            "file": "wp-includes/customize/class-wp-customize-nav-menu-item-control.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the form field template for nav menu items in the customizer.",
                "long_description": "Additional fields can be rendered here and managed in JavaScript.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.4.0"
                    }
                ],
                "long_description_html": "<p>Additional fields can be rendered here and managed in JavaScript.</p>"
            },
            "args": 0
        },
        {
            "name": "wp_network_dashboard_setup",
            "file": "wp-admin/includes/dashboard.php",
            "type": "action",
            "doc": {
                "description": "Fires after core widgets for the Network Admin dashboard have been registered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_playlist_scripts",
            "file": "wp-includes/media.php",
            "type": "action",
            "doc": {
                "description": "Prints and enqueues playlist scripts, styles, and JavaScript templates.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "Type of playlist. Possible values are 'audio' or 'video'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$type"
                    },
                    {
                        "name": "param",
                        "content": "The 'theme' for the playlist. Core provides 'light' and 'dark'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$style"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_print_footer_scripts",
            "file": "wp-includes/script-loader.php",
            "type": "action",
            "doc": {
                "description": "Fires when footer scripts are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.8.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_print_scripts",
            "file": "wp-includes/functions.wp-scripts.php",
            "type": "action",
            "doc": {
                "description": "Fires before scripts in the $handles queue are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_print_styles",
            "file": "wp-includes/functions.wp-styles.php",
            "type": "action",
            "doc": {
                "description": "Fires before styles in the $handles queue are printed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_privacy_personal_data_erased",
            "file": "wp-admin/includes/privacy-tools.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a personal data erasure request has been marked completed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The privacy request post ID associated with this request.",
                        "types": [
                            "int"
                        ],
                        "variable": "$request_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_privacy_personal_data_export_file",
            "file": "wp-admin/includes/privacy-tools.php",
            "type": "action",
            "doc": {
                "description": "Generate the export file from the collected, grouped personal data.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "param",
                        "content": "The export request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$request_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_privacy_personal_data_export_file_created",
            "file": "wp-admin/includes/privacy-tools.php",
            "type": "action",
            "doc": {
                "description": "Fires right after all personal data has been written to the export file.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.9.6"
                    },
                    {
                        "name": "since",
                        "content": "5.4.0",
                        "description": "Added the <code>$json_report_pathname</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The full path to the export file on the filesystem.",
                        "types": [
                            "string"
                        ],
                        "variable": "$archive_pathname"
                    },
                    {
                        "name": "param",
                        "content": "The URL of the archive file.",
                        "types": [
                            "string"
                        ],
                        "variable": "$archive_url"
                    },
                    {
                        "name": "param",
                        "content": "The full path to the HTML personal data report on the filesystem.",
                        "types": [
                            "string"
                        ],
                        "variable": "$html_report_pathname"
                    },
                    {
                        "name": "param",
                        "content": "The export request ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$request_id"
                    },
                    {
                        "name": "param",
                        "content": "The full path to the JSON personal data report on the filesystem.",
                        "types": [
                            "string"
                        ],
                        "variable": "$json_report_pathname"
                    }
                ],
                "long_description_html": ""
            },
            "args": 5
        },
        {
            "name": "wp_register_sidebar_widget",
            "file": "wp-includes/widgets.php",
            "type": "action",
            "doc": {
                "description": "Fires once for each registered widget.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "An array of default widget arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$widget"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_restore_post_revision",
            "file": "wp-includes/revision.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post revision has been restored.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.6.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post revision ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$revision_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_roles_init",
            "file": "wp-includes/class-wp-roles.php",
            "type": "action",
            "doc": {
                "description": "Fires after the roles have been initialized, allowing plugins to add their own roles.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.7.0"
                    },
                    {
                        "name": "param",
                        "content": "A reference to the WP_Roles object.",
                        "types": [
                            "\\WP_Roles"
                        ],
                        "variable": "$wp_roles"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_set_comment_status",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after transitioning a comment's status from one to another in the database and removing the comment from the object cache, but prior to all status transition hooks.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "1.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Comment ID as a numeric string.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "Current comment status. Possible values include 'hold', '0', 'approve', '1', 'spam', and 'trash'.",
                        "types": [
                            "string"
                        ],
                        "variable": "$comment_status"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_set_password",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user password is set.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.2.0"
                    },
                    {
                        "name": "param",
                        "content": "The plaintext password just set.",
                        "types": [
                            "string"
                        ],
                        "variable": "$password"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the user whose password was just set.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_sitemaps_init",
            "file": "wp-includes/sitemaps.php",
            "type": "action",
            "doc": {
                "description": "Fires when initializing the Sitemaps object.",
                "long_description": "Additional sitemaps should be registered on this hook.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Sitemaps object.",
                        "types": [
                            "\\WP_Sitemaps"
                        ],
                        "variable": "$wp_sitemaps"
                    }
                ],
                "long_description_html": "<p>Additional sitemaps should be registered on this hook.</p>"
            },
            "args": 1
        },
        {
            "name": "wp_tiny_mce_init",
            "file": "wp-includes/class-wp-editor.php",
            "type": "action",
            "doc": {
                "description": "Fires after tinymce.js is loaded, but before any TinyMCE editor instances are created.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "TinyMCE settings array.",
                        "types": [
                            "array"
                        ],
                        "variable": "$mce_settings"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_trash_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires before a post is sent to the Trash.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.3.0"
                    },
                    {
                        "name": "since",
                        "content": "6.3.0",
                        "description": "Added the <code>$previous_status</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "The status of the post about to be trashed.",
                        "types": [
                            "string"
                        ],
                        "variable": "$previous_status"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_trigger_error_run",
            "file": "wp-includes/functions.php",
            "type": "action",
            "doc": {
                "description": "Fires when the given function triggers a user-level error/warning/notice/deprecation message.",
                "long_description": "Can be used for debug backtracking.",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The function that was called.",
                        "types": [
                            "string"
                        ],
                        "variable": "$function_name"
                    },
                    {
                        "name": "param",
                        "content": "A message explaining what has been done incorrectly.",
                        "types": [
                            "string"
                        ],
                        "variable": "$message"
                    },
                    {
                        "name": "param",
                        "content": "The designated error type for this error.",
                        "types": [
                            "int"
                        ],
                        "variable": "$error_level"
                    }
                ],
                "long_description_html": "<p>Can be used for debug backtracking.</p>"
            },
            "args": 3
        },
        {
            "name": "wp_uninitialize_site",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when a site's uninitialization routine should be executed.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Deleted site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "$old_site"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_unregister_sidebar_widget",
            "file": "wp-includes/widgets.php",
            "type": "action",
            "doc": {
                "description": "Fires just before a widget is removed from a sidebar.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The widget ID.",
                        "types": [
                            "int",
                            "string"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wp_update_application_password",
            "file": "wp-includes/class-wp-application-passwords.php",
            "type": "action",
            "doc": {
                "description": "Fires when an application password is updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.6.0"
                    },
                    {
                        "name": "param",
                        "content": "The user ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "The updated app password details.",
                        "types": [
                            "array"
                        ],
                        "variable": "$item"
                    },
                    {
                        "name": "param",
                        "content": "The information to update.",
                        "types": [
                            "array"
                        ],
                        "variable": "$update"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_update_comment_count",
            "file": "wp-includes/comment.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a post's comment count is updated in the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "The new comment count.",
                        "types": [
                            "int"
                        ],
                        "variable": "$new"
                    },
                    {
                        "name": "param",
                        "content": "The old comment count.",
                        "types": [
                            "int"
                        ],
                        "variable": "$old"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_update_nav_menu",
            "file": "wp-includes/nav-menu.php",
            "type": "action",
            "doc": {
                "description": "Fires after a navigation menu has been successfully updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "$menu_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of menu data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$menu_data"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_update_nav_menu_item",
            "file": "wp-includes/nav-menu.php",
            "type": "action",
            "doc": {
                "description": "Fires after a navigation menu item has been updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "see",
                        "content": "",
                        "refers": "wp_update_nav_menu_item()"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated menu.",
                        "types": [
                            "int"
                        ],
                        "variable": "$menu_id"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated menu item.",
                        "types": [
                            "int"
                        ],
                        "variable": "$menu_item_db_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments used to update a menu item.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_update_site",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires once a site has been updated in the database.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "New site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "$new_site"
                    },
                    {
                        "name": "param",
                        "content": "Old site object.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "$old_site"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_update_user",
            "file": "wp-includes/user.php",
            "type": "action",
            "doc": {
                "description": "Fires after the user has been updated and emails have been sent.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "6.3.0"
                    },
                    {
                        "name": "param",
                        "content": "The ID of the user that was just updated.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "The array of user data that was updated.",
                        "types": [
                            "array"
                        ],
                        "variable": "$userdata"
                    },
                    {
                        "name": "param",
                        "content": "The unedited array of user data that was updated.",
                        "types": [
                            "array"
                        ],
                        "variable": "$userdata_raw"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wp_upgrade",
            "file": "wp-admin/includes/upgrade.php",
            "type": "action",
            "doc": {
                "description": "Fires after a site is fully upgraded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.9.0"
                    },
                    {
                        "name": "param",
                        "content": "The new $wp_db_version.",
                        "types": [
                            "int"
                        ],
                        "variable": "$wp_db_version"
                    },
                    {
                        "name": "param",
                        "content": "The old (current) $wp_db_version.",
                        "types": [
                            "int"
                        ],
                        "variable": "$wp_current_db_version"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wp_user_dashboard_setup",
            "file": "wp-admin/includes/dashboard.php",
            "type": "action",
            "doc": {
                "description": "Fires after core widgets for the User Admin dashboard have been registered.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.1.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wp_validate_site_data",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires when data should be validated for a site prior to inserting or updating in the database.",
                "long_description": "Plugins should amend the `$errors` object via its `WP_Error::add()` method.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Error object to add validation errors to.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    },
                    {
                        "name": "param",
                        "content": "Associative array of complete site data. See {@see wp_insert_site()} for the included data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$data"
                    },
                    {
                        "name": "param",
                        "content": "The old site object if the data belongs to a site being updated, or null if it is a new site being inserted.",
                        "types": [
                            "\\WP_Site",
                            "null"
                        ],
                        "variable": "$old_site"
                    }
                ],
                "long_description_html": "<p>Plugins should amend the <code>$errors</code> object via its <code>WP_Error::add()</code> method.</p>"
            },
            "args": 3
        },
        {
            "name": "wp_validate_site_deletion",
            "file": "wp-includes/ms-site.php",
            "type": "action",
            "doc": {
                "description": "Fires before a site should be deleted from the database.",
                "long_description": "Plugins should amend the `$errors` object via its `WP_Error::add()` method. If any errors are present, the site will not be deleted.",
                "tags": [
                    {
                        "name": "since",
                        "content": "5.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Error object to add validation errors to.",
                        "types": [
                            "\\WP_Error"
                        ],
                        "variable": "$errors"
                    },
                    {
                        "name": "param",
                        "content": "The site object to be deleted.",
                        "types": [
                            "\\WP_Site"
                        ],
                        "variable": "$old_site"
                    }
                ],
                "long_description_html": "<p>Plugins should amend the <code>$errors</code> object via its <code>WP_Error::add()</code> method. If any errors are present, the site will not be deleted.</p>"
            },
            "args": 2
        },
        {
            "name": "wp_verify_nonce_failed",
            "file": "wp-includes/pluggable.php",
            "type": "action",
            "doc": {
                "description": "Fires when nonce verification fails.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.4.0"
                    },
                    {
                        "name": "param",
                        "content": "The invalid nonce.",
                        "types": [
                            "string"
                        ],
                        "variable": "$nonce"
                    },
                    {
                        "name": "param",
                        "content": "The nonce action.",
                        "types": [
                            "string",
                            "int"
                        ],
                        "variable": "$action"
                    },
                    {
                        "name": "param",
                        "content": "The current user object.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    },
                    {
                        "name": "param",
                        "content": "The user's session token.",
                        "types": [
                            "string"
                        ],
                        "variable": "$token"
                    }
                ],
                "long_description_html": ""
            },
            "args": 4
        },
        {
            "name": "wpmu_activate_blog",
            "file": "wp-includes/ms-functions.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a site is activated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Blog ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$blog_id"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "User password.",
                        "types": [
                            "string"
                        ],
                        "variable": "$password"
                    },
                    {
                        "name": "param",
                        "content": "Site title.",
                        "types": [
                            "string"
                        ],
                        "variable": "$signup_title"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                        "types": [
                            "array"
                        ],
                        "variable": "$meta"
                    }
                ],
                "long_description_html": ""
            },
            "args": 5
        },
        {
            "name": "wpmu_activate_user",
            "file": "wp-includes/ms-functions.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a new user is activated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    },
                    {
                        "name": "param",
                        "content": "User password.",
                        "types": [
                            "string"
                        ],
                        "variable": "$password"
                    },
                    {
                        "name": "param",
                        "content": "Signup meta data.",
                        "types": [
                            "array"
                        ],
                        "variable": "$meta"
                    }
                ],
                "long_description_html": ""
            },
            "args": 3
        },
        {
            "name": "wpmu_blog_updated",
            "file": "wp-includes/ms-blogs.php",
            "type": "action",
            "doc": {
                "description": "Fires after the blog details are updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$blog_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wpmu_delete_user",
            "file": "wp-admin/includes/ms.php",
            "type": "action",
            "doc": {
                "description": "Fires before a user is deleted from the network.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "since",
                        "content": "5.5.0",
                        "description": "Added the <code>$user</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "ID of the user about to be deleted from the network.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    },
                    {
                        "name": "param",
                        "content": "WP_User object of the user about to be deleted from the network.",
                        "types": [
                            "\\WP_User"
                        ],
                        "variable": "$user"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "wpmu_new_user",
            "file": "wp-includes/ms-functions.php",
            "type": "action",
            "doc": {
                "description": "Fires immediately after a new user is created.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "User ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$user_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wpmu_options",
            "file": "wp-admin/network/settings.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the Network Settings form, before the submit button.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wpmu_update_blog_options",
            "file": "wp-admin/network/site-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires after the site options are updated.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "since",
                        "content": "4.4.0",
                        "description": "Added <code>$id</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "The ID of the site being updated.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wpmu_upgrade_page",
            "file": "wp-admin/network/upgrade.php",
            "type": "action",
            "doc": {
                "description": "Fires before the footer on the network upgrade screen.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wpmu_upgrade_site",
            "file": "wp-admin/network/upgrade.php",
            "type": "action",
            "doc": {
                "description": "Fires after each site has been upgraded.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$site_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "wpmuadminedit",
            "file": "wp-admin/network/edit.php",
            "type": "action",
            "doc": {
                "description": "Fires just before the action handler in several Network Admin screens.",
                "long_description": "This hook fires on multiple screens in the Multisite Network Admin, including Users, Network Settings, and Site Settings.",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    }
                ],
                "long_description_html": "<p>This hook fires on multiple screens in the Multisite Network Admin, including Users, Network Settings, and Site Settings.</p>"
            },
            "args": 0
        },
        {
            "name": "wpmuadminresult",
            "file": "wp-admin/includes/dashboard.php",
            "type": "action",
            "doc": {
                "description": "Fires in the Network Admin 'Right Now' dashboard widget just before the user and site search form fields.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "wpmublogsaction",
            "file": "wp-admin/includes/class-wp-ms-sites-list-table.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the auxiliary 'Actions' column of the Sites list table.",
                "long_description": "By default this column is hidden unless something is hooked to the action.",
                "tags": [
                    {
                        "name": "since",
                        "content": "MU (3.0.0)",
                        "description": "MU (3.0.0)"
                    },
                    {
                        "name": "param",
                        "content": "The site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$blog_id"
                    }
                ],
                "long_description_html": "<p>By default this column is hidden unless something is hooked to the action.</p>"
            },
            "args": 1
        },
        {
            "name": "wpmueditblogaction",
            "file": "wp-admin/network/site-settings.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the Edit Site form, before the submit button.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Site ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "xmlrpc_call",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after the XML-RPC user has been authenticated but before the rest of the method logic begins.",
                "long_description": "All built-in XML-RPC methods use the action xmlrpc_call, with a parameter equal to the method's name, e.g., wp.getUsersBlogs, wp.newPost, etc.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.5.0"
                    },
                    {
                        "name": "since",
                        "content": "5.7.0",
                        "description": "Added the <code>$args</code> and <code>$server</code> parameters."
                    },
                    {
                        "name": "param",
                        "content": "The method name.",
                        "types": [
                            "string"
                        ],
                        "variable": "$name"
                    },
                    {
                        "name": "param",
                        "content": "The escaped arguments passed to the method.",
                        "types": [
                            "array",
                            "string"
                        ],
                        "variable": "$args"
                    },
                    {
                        "name": "param",
                        "content": "The XML-RPC server instance.",
                        "types": [
                            "\\wp_xmlrpc_server"
                        ],
                        "variable": "$server"
                    }
                ],
                "long_description_html": "<p>All built-in XML-RPC methods use the action xmlrpc_call, with a parameter equal to the method's name, e.g., wp.getUsersBlogs, wp.newPost, etc.</p>"
            },
            "args": 3
        },
        {
            "name": "xmlrpc_call_success_blogger_deletePost",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post has been successfully deleted via the XML-RPC Blogger API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted post.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to delete the post.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_blogger_editPost",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post has been successfully updated via the XML-RPC Blogger API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated post.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments for the post to edit.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_blogger_newPost",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new post has been successfully created via the XML-RPC Blogger API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new post.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of new post arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_mw_editPost",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a post has been successfully updated via the XML-RPC MovableType API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated post.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to update the post.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_mw_newMediaObject",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new attachment has been added via the XML-RPC MovableType API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new attachment.",
                        "types": [
                            "int"
                        ],
                        "variable": "$id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to add the attachment.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_mw_newPost",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new post has been successfully created via the XML-RPC MovableType API.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new post.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to create the new post.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_wp_deleteCategory",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a category has been successfully deleted via XML-RPC.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted category.",
                        "types": [
                            "int"
                        ],
                        "variable": "$category_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to delete the category.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_wp_deleteComment",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a comment has been successfully deleted via XML-RPC.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to delete the comment.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_wp_deletePage",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a page has been successfully deleted via XML-RPC.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the deleted page.",
                        "types": [
                            "int"
                        ],
                        "variable": "$page_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to delete the page.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_wp_editComment",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a comment has been successfully updated via XML-RPC.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the updated comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of arguments to update the comment.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_wp_newCategory",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new category has been successfully created via XML-RPC.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new category.",
                        "types": [
                            "int"
                        ],
                        "variable": "$cat_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of new category arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_call_success_wp_newComment",
            "file": "wp-includes/class-wp-xmlrpc-server.php",
            "type": "action",
            "doc": {
                "description": "Fires after a new comment has been successfully created via XML-RPC.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.4.0"
                    },
                    {
                        "name": "param",
                        "content": "ID of the new comment.",
                        "types": [
                            "int"
                        ],
                        "variable": "$comment_id"
                    },
                    {
                        "name": "param",
                        "content": "An array of new comment arguments.",
                        "types": [
                            "array"
                        ],
                        "variable": "$args"
                    }
                ],
                "long_description_html": ""
            },
            "args": 2
        },
        {
            "name": "xmlrpc_publish_post",
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires when _publish_post_hook() is called during an XML-RPC request.",
                "long_description": "",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.1.0"
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    }
                ],
                "long_description_html": ""
            },
            "args": 1
        },
        {
            "name": "xmlrpc_rsd_apis",
            "file": "xmlrpc.php",
            "type": "action",
            "doc": {
                "description": "Fires when adding APIs to the Really Simple Discovery (RSD) endpoint.",
                "long_description": "",
                "tags": [
                    {
                        "name": "link",
                        "content": "<a href=\"https://cyber.harvard.edu/blogs/gems/tech/rsd.html\">https://cyber.harvard.edu/blogs/gems/tech/rsd.html</a>",
                        "link": "https://cyber.harvard.edu/blogs/gems/tech/rsd.html"
                    },
                    {
                        "name": "since",
                        "content": "3.5.0"
                    }
                ],
                "long_description_html": ""
            },
            "args": 0
        },
        {
            "name": "{$new_status}_{$post->post_type}",
            "aliases": [
                "draft_page",
                "draft_post",
                "future_page",
                "future_post",
                "pending_page",
                "pending_post",
                "private_page",
                "private_post",
                "publish_attachment",
                "publish_page",
                "publish_post",
                "trash_attachment",
                "trash_page",
                "trash_post"
            ],
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires when a post is transitioned from one status to another.",
                "long_description": "The dynamic portions of the hook name, `$new_status` and `$post->post_type`, refer to the new post status and post type, respectively.\n Possible hook names include:\n\n  - `draft_post`\n  - `future_post`\n  - `pending_post`\n  - `private_post`\n  - `publish_post`\n  - `trash_post`\n  - `draft_page`\n  - `future_page`\n  - `pending_page`\n  - `private_page`\n  - `publish_page`\n  - `trash_page`\n  - `publish_attachment`\n  - `trash_attachment`\n Please note: When this action is hooked using a particular post status (like 'publish', as `publish_{$post->post_type}`), it will fire both when a post is first transitioned to that status from something else, as well as upon subsequent post updates (old and new status are both the same).\n Therefore, if you are looking to only fire a callback when a post is first transitioned to a status, use the {@see 'transition_post_status'} hook instead.",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "since",
                        "content": "5.9.0",
                        "description": "Added <code>$old_status</code> parameter."
                    },
                    {
                        "name": "param",
                        "content": "Post ID.",
                        "types": [
                            "int"
                        ],
                        "variable": "$post_id"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    },
                    {
                        "name": "param",
                        "content": "Old post status.",
                        "types": [
                            "string"
                        ],
                        "variable": "$old_status"
                    }
                ],
                "long_description_html": "<p>The dynamic portions of the hook name, <code>$new_status</code> and <code>$post-&gt;post_type</code>, refer to the new post status and post type, respectively.</p> <p>Possible hook names include:</p> <ul> <li><code>draft_post</code></li> <li><code>future_post</code></li> <li><code>pending_post</code></li> <li><code>private_post</code></li> <li><code>publish_post</code></li> <li><code>trash_post</code></li> <li><code>draft_page</code></li> <li><code>future_page</code></li> <li><code>pending_page</code></li> <li><code>private_page</code></li> <li><code>publish_page</code></li> <li><code>trash_page</code></li> <li><code>publish_attachment</code></li> <li><code>trash_attachment</code></li> </ul> <p>Please note: When this action is hooked using a particular post status (like 'publish', as <code>publish_{$post-&gt;post_type}</code>), it will fire both when a post is first transitioned to that status from something else, as well as upon subsequent post updates (old and new status are both the same).</p> <p>Therefore, if you are looking to only fire a callback when a post is first transitioned to a status, use the {@see 'transition_post_status'} hook instead.</p>"
            },
            "args": 3
        },
        {
            "name": "{$old_status}_to_{$new_status}",
            "aliases": [
                "draft_to_publish",
                "pending_to_draft",
                "publish_to_trash"
            ],
            "file": "wp-includes/post.php",
            "type": "action",
            "doc": {
                "description": "Fires when a post is transitioned from one status to another.",
                "long_description": "The dynamic portions of the hook name, `$new_status` and `$old_status`, refer to the old and new post statuses, respectively.\n Possible hook names include:\n\n  - `draft_to_publish`\n  - `publish_to_trash`\n  - `pending_to_draft`",
                "tags": [
                    {
                        "name": "since",
                        "content": "2.3.0"
                    },
                    {
                        "name": "param",
                        "content": "Post object.",
                        "types": [
                            "\\WP_Post"
                        ],
                        "variable": "$post"
                    }
                ],
                "long_description_html": "<p>The dynamic portions of the hook name, <code>$new_status</code> and <code>$old_status</code>, refer to the old and new post statuses, respectively.</p> <p>Possible hook names include:</p> <ul> <li><code>draft_to_publish</code></li> <li><code>publish_to_trash</code></li> <li><code>pending_to_draft</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "{$page_hook}",
            "file": "wp-admin/admin.php",
            "type": "action",
            "doc": {
                "description": "Used to call the registered callback for a plugin screen.",
                "long_description": "This hook uses a dynamic hook name, `$page_hook`, which refers to a mixture of plugin page information including:\n 1. The page type. If the plugin page is registered as a submenu page, such as for    Settings, the page type would be 'settings'. Otherwise the type is 'toplevel'.\n 2. A separator of '_page_'.\n 3. The plugin basename minus the file extension.\n Together, the three parts form the `$page_hook`. Citing the example above, the hook name used would be 'settings_page_pluginbasename'.",
                "tags": [
                    {
                        "name": "see",
                        "content": "",
                        "refers": "get_plugin_page_hook()"
                    },
                    {
                        "name": "since",
                        "content": "1.5.0"
                    }
                ],
                "long_description_html": "<p>This hook uses a dynamic hook name, <code>$page_hook</code>, which refers to a mixture of plugin page information including:</p> <ol> <li>The page type. If the plugin page is registered as a submenu page, such as for Settings, the page type would be 'settings'. Otherwise the type is 'toplevel'.</li> <li>A separator of '<em>page</em>'.</li> <li>The plugin basename minus the file extension.</li> </ol> <p>Together, the three parts form the <code>$page_hook</code>. Citing the example above, the hook name used would be 'settings_page_pluginbasename'.</p>"
            },
            "args": 0
        },
        {
            "name": "{$taxonomy}_add_form",
            "aliases": [
                "category_add_form",
                "post_tag_add_form"
            ],
            "file": "wp-admin/edit-tags.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the Add Term form for all taxonomies.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_add_form`\n  - `post_tag_add_form`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_add_form</code></li> <li><code>post_tag_add_form</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "{$taxonomy}_add_form_fields",
            "aliases": [
                "category_add_form_fields",
                "post_tag_add_form_fields"
            ],
            "file": "wp-admin/edit-tags.php",
            "type": "action",
            "doc": {
                "description": "Fires after the Add Term form fields.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_add_form_fields`\n  - `post_tag_add_form_fields`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_add_form_fields</code></li> <li><code>post_tag_add_form_fields</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "{$taxonomy}_edit_form",
            "aliases": [
                "category_edit_form",
                "post_tag_edit_form"
            ],
            "file": "wp-admin/edit-tag-form.php",
            "type": "action",
            "doc": {
                "description": "Fires at the end of the Edit Term form for all taxonomies.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_edit_form`\n  - `post_tag_edit_form`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$tag"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_edit_form</code></li> <li><code>post_tag_edit_form</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "{$taxonomy}_edit_form_fields",
            "aliases": [
                "category_edit_form_fields",
                "post_tag_edit_form_fields"
            ],
            "file": "wp-admin/edit-tag-form.php",
            "type": "action",
            "doc": {
                "description": "Fires after the Edit Term form fields are displayed.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_edit_form_fields`\n  - `post_tag_edit_form_fields`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$tag"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_edit_form_fields</code></li> <li><code>post_tag_edit_form_fields</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "{$taxonomy}_pre_add_form",
            "aliases": [
                "category_pre_add_form",
                "post_tag_pre_add_form"
            ],
            "file": "wp-admin/edit-tags.php",
            "type": "action",
            "doc": {
                "description": "Fires before the Add Term form for all taxonomies.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_pre_add_form`\n  - `post_tag_pre_add_form`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "The taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_pre_add_form</code></li> <li><code>post_tag_pre_add_form</code></li> </ul>"
            },
            "args": 1
        },
        {
            "name": "{$taxonomy}_pre_edit_form",
            "aliases": [
                "category_pre_edit_form",
                "post_tag_pre_edit_form"
            ],
            "file": "wp-admin/edit-tag-form.php",
            "type": "action",
            "doc": {
                "description": "Fires before the Edit Term form for all taxonomies.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_pre_edit_form`\n  - `post_tag_pre_edit_form`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.0.0"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$tag"
                    },
                    {
                        "name": "param",
                        "content": "Current $taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_pre_edit_form</code></li> <li><code>post_tag_pre_edit_form</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "{$taxonomy}_term_edit_form_tag",
            "aliases": [
                "category_term_edit_form_tag",
                "post_tag_term_edit_form_tag"
            ],
            "file": "wp-admin/edit-tag-form.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the Edit Term form tag.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_term_edit_form_tag`\n  - `post_tag_term_edit_form_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_term_edit_form_tag</code></li> <li><code>post_tag_term_edit_form_tag</code></li> </ul>"
            },
            "args": 0
        },
        {
            "name": "{$taxonomy}_term_edit_form_top",
            "aliases": [
                "category_term_edit_form_top",
                "post_tag_term_edit_form_top"
            ],
            "file": "wp-admin/edit-tag-form.php",
            "type": "action",
            "doc": {
                "description": "Fires at the beginning of the Edit Term form.",
                "long_description": "At this point, the required hidden fields and nonces have already been output.\n The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_term_edit_form_top`\n  - `post_tag_term_edit_form_top`",
                "tags": [
                    {
                        "name": "since",
                        "content": "4.5.0"
                    },
                    {
                        "name": "param",
                        "content": "Current taxonomy term object.",
                        "types": [
                            "\\WP_Term"
                        ],
                        "variable": "$tag"
                    },
                    {
                        "name": "param",
                        "content": "Current $taxonomy slug.",
                        "types": [
                            "string"
                        ],
                        "variable": "$taxonomy"
                    }
                ],
                "long_description_html": "<p>At this point, the required hidden fields and nonces have already been output.</p> <p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_term_edit_form_top</code></li> <li><code>post_tag_term_edit_form_top</code></li> </ul>"
            },
            "args": 2
        },
        {
            "name": "{$taxonomy}_term_new_form_tag",
            "aliases": [
                "category_term_new_form_tag",
                "post_tag_term_new_form_tag"
            ],
            "file": "wp-admin/edit-tags.php",
            "type": "action",
            "doc": {
                "description": "Fires inside the Add Tag form tag.",
                "long_description": "The dynamic portion of the hook name, `$taxonomy`, refers to the taxonomy slug.\n Possible hook names include:\n\n  - `category_term_new_form_tag`\n  - `post_tag_term_new_form_tag`",
                "tags": [
                    {
                        "name": "since",
                        "content": "3.7.0"
                    }
                ],
                "long_description_html": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p> <p>Possible hook names include:</p> <ul> <li><code>category_term_new_form_tag</code></li> <li><code>post_tag_term_new_form_tag</code></li> </ul>"
            },
            "args": 0
        }
    ]
}